<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>atom feed</title>
  <updated>2014-06-10T22:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/atom.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2014-06-11:/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html</id>
    <title type="html">Multiple unicorn servers with SSL on nginx</title>
    <published>2014-06-10T22:00:00Z</published>
    <updated>2014-06-10T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html"/>
    <content type="html">&lt;p&gt;A while ago I set up my own &lt;a href="https://www.archlinux.org/"&gt;arch linux&lt;/a&gt; server at &lt;a href="https://www.digitalocean.com/"&gt;digital ocean&lt;/a&gt;. It was some work and I learned a lot in the process. At the moment I have three &lt;a href="http://unicorn.bogomips.org/"&gt;unicorn&lt;/a&gt;-based ruby things running behind &lt;a href="http://nginx.org/"&gt;nginx&lt;/a&gt; on the server. One is built with &lt;a href="http://rubyonrails.org/"&gt;rails&lt;/a&gt; and the other two with &lt;a href="http://www.sinatrarb.com/"&gt;sinatra&lt;/a&gt;. The one with rails is SSL-only. The work of setting up nginx was pretty straightforward but still I had to understand things from several sources so here is a rundown of how I accomplished this.&lt;/p&gt;

&lt;p&gt;nginx is easy to configure. Compared with &lt;a href="https://httpd.apache.org/"&gt;apache&lt;/a&gt; it is a breeze. The configuration is typically placed in &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. The syntax is basically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt; {
    &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there can be nested blocks inside another block. When configuring a server it seems to me that the freedom about how to nest things is rather high as long as it makes sense to the configuration.&lt;/p&gt;

&lt;p&gt;My server is defined inside a &lt;code&gt;http&lt;/code&gt; block that contains all the domains I want to configure for the server. It then got some sensible defaults that I copied from somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    include       mime.types;
    default_type  application/octet-stream;

    ssl_session_cache builtin:1000 shared:SSL:10m;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  120;

    gzip  on;
    gzip_vary on;
    gzip_min_length 500;

    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_types text/plain text/xml text/css
       text/comma-separated-values
       text/javascript application/x-javascript
       application/atom+xml image/x-icon;

    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is some reasonable stuff that I want to have for all my domains. But it is not the focus of this post so you’ll have to read up on it elsewhere. Then I configured the upstream unicorn connection for each domain like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    upstream oneofmydomains_unicorn_server {
        server unix:/var/rack/oneofmydomains/tmp/sockets/unicorn.sock
    }
    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;oneofmydomains_unicorn_server&lt;/code&gt; is just a name that will be used later to bind a domain to this unicorn socket. The file name coming after &lt;code&gt;unix:&lt;/code&gt; should be the one in your unicorn config for that particular server.&lt;/p&gt;

&lt;p&gt;Then comes a &lt;code&gt;server&lt;/code&gt; section for each domain. Lets start with the plain HTTP variant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 80;
        server_name .oneofmydomains.com;

        location / {
            root /var/rack/oneofmydomains/public;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://oneofmydomains_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section starts with the port to listen on this should be 80 in most cases. Then comes the server name describing what domain requests to listen to for this server. This is the part that makes it possible to have several domains running on the same nginx instance. After that another block called &lt;code&gt;location&lt;/code&gt;. It starts with where to find static content. So for each request it will look for files in this folder and serving them - if none is found it will move on to the &lt;code&gt;proxy_pass&lt;/code&gt; unicorn server that should match the name given in the upstream section above. The other &lt;code&gt;proxy_*&lt;/code&gt; directives is needed to give the unicorn server a useful environment.&lt;/p&gt;

&lt;p&gt;So onwards to SSL. One might think that here is where you put in a &lt;code&gt;https&lt;/code&gt; section instead of &lt;code&gt;http&lt;/code&gt; and there is such a construct. I didn’t try it since I got it to work in another way. There are probably several ways to do this.&lt;/p&gt;

&lt;p&gt;To enable SSL you need to get a certificate. If your site is serious you want to buy it from a trusted signatory but if you don’t care about users getting warnings about untrusted certificates you can generate one yourself.&lt;/p&gt;

&lt;p&gt;I used a variant of the server section to setup SSL. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 443;
        server_name .oneofmydomains.com;

        ssl on;

        ssl_certificate     /etc/nginx/www.oneofmydomains.com.cert;
        ssl_certificate_key /etc/nginx/www.oneofmydomains.com.key;
        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;       # default on newer versions
        ssl_ciphers          ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES128-SHA:RC4-SHA:RC4-MD5:ECDHE-RSA-AES256-SHA:AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:DES-CBC3-SHA:AES128-SHA;
        ssl_prefer_server_ciphers on;

        root /var/rack/oneofmydomains/public;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-FORWARDED-PROTO https;
            # pass to the upstream unicorn server mentioned above
            proxy_pass http://memberaid_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see most of the server section is the same. The default port for SSL is 443 so if you want your users to be able to use https://oneofmydomains.com without a port number - this is the way to go. (Just like 80 in the case of normal http.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssl&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt; and the certificate and its key is specified. Then there are lists of protocols and ciphers. This is used when a calling client handshakes with the server. It is just to decide a protocol and cipher to use for the interaction. If there is no match you may have a problem…. The location part is a bit different also with a somewhat different proxy header setup. &lt;/p&gt;

&lt;p&gt;And there you go. Once &lt;code&gt;nginx.conf&lt;/code&gt; is edited you need to restart or reload nginx in order to make the changes effectual. I have enjoyed working with nginx. It is not so hard to understand what to do and the number of pitfalls are kept at a minimum.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-04-26:/2014/04/zoo-city.html</id>
    <title type="html">Zoo city</title>
    <published>2014-04-25T22:00:00Z</published>
    <updated>2014-04-25T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/04/zoo-city.html"/>
    <content type="html">&lt;p&gt;In the middle of reading the immense Game of Thrones serie 
I decided to take a break and read something else and my 
eyes fell on &lt;a href="https://www.goodreads.com/book/show/7163862-zoo-city"&gt;Zoo City&lt;/a&gt; 
by Lauren Beukes that I bought as part of a 
&lt;a href="https://www.humblebundle.com/"&gt;Humble Bundle&lt;/a&gt; a while ago.
It turned out to be a nice break from high fantasy. In Zoo City
lives people that somehow did something wrong and as a result ended
up being attached to an animal. The main character Zinzi carries around a
sloth.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm1.staticflickr.com/23/30950009_8c828d1e1d_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The stories nemesis is attached to a huge alligator and so on. Having an animal
is seen as a stigma by other persons in society so they tend to live 
in their own areas. Zinzi gets a lot of help from her sloth.
Whenever she is embarking in dubious directions the sloth tries to stop her.
With the animals (I think) also comes a magical skill. Zinzi 
can feel persons missed things so she makes a living out of helping people
find stuff that they have lost. The main story evolves around finding a
missing person and all kinds of intricate turns of events that such a 
weird setting can offer. Enough said about that - read it to find out 
what happens….&lt;/p&gt;

&lt;p&gt;An interesting side plot is Zinzis other work. Being in debt to some criminal
element she works it off by reading and answering scam email replies. She
also impersonate persons that is described in the scam to get more money
out of scam victims. Normally this line of work is seen as something done
by the scum of the earth. But Zinzi is the hero in this story so this 
makes the scam work feel like a normal work. Brillantly done.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.flickr.com/photos/praziquantel/30950009/"&gt;excellent sloth picture&lt;/a&gt; 
is  by &lt;a href="https://www.flickr.com/photos/praziquantel/"&gt;Carol Schaffer&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-04-23:/2014/04/sublime-and-asciidoc.html</id>
    <title type="html">Making symbols available for AsciiDoc syntax in Sublime Text 3</title>
    <published>2014-04-22T22:00:00Z</published>
    <updated>2014-04-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/04/sublime-and-asciidoc.html"/>
    <content type="html">&lt;p&gt;&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; has become my favorite editor on Mac. It is fast, flexible,
has tons of useful plugins and I can open any file or directory from the command line using &lt;em&gt;subl&lt;/em&gt;.
There are many blog post out there describing the strength of Sublime, so today I just wanted
to focus on a problem for which I could not find a solution out of the box.&lt;/p&gt;

&lt;p&gt;Sublime has become my default editor for Markdown and AsciiDoc. Whereas the symbol navigation via
&lt;em&gt;&amp;lt;ctrl+r&amp;gt;&lt;/em&gt; works just fine for the Markdown plugin, it is not working for AsciiDoc. This is
especially painful when editing long documents where the symbol list gives a fast overview over the
file. In fact the missing symbols were nagging me so much, that I decided to embark into a discovery
journey into the inner workings of Sublime Text.&lt;/p&gt;

&lt;p&gt;In Sublime Text 3 language support (syntax highlighting, snippets, etc) is bundled in a file with the
postfix &lt;em&gt;sublime-package&lt;/em&gt;. Effectively it is just a zip file which you can expand to view its contents.
The main file is &lt;language&gt;.tmLanguage. It contains a whole bunch of regular expressions which capture
and name different parts of the syntax of the language in question. To make symbols work you also need
a file called *Symbol List.tmPreferences* (the name is not relevant I think), which tells Sublime
which of the named syntax parts should be made available via symbols. Exactly this symbol list is missing
in the AsciiDoc plugin (http://github.com/SublimeText/AsciiDoc). After looking at *AsciiDoc.tmLanguage*,
I thought the following should work:&lt;/language&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;
&amp;lt;plist version="1.0"&amp;gt;
&amp;lt;dict&amp;gt;
   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;Symbol List&amp;lt;/string&amp;gt;
   &amp;lt;key&amp;gt;scope&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;markup.heading.asciidoc&amp;lt;/string&amp;gt;
   &amp;lt;key&amp;gt;settings&amp;lt;/key&amp;gt;
   &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;showInSymbolList&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;
   &amp;lt;/dict&amp;gt;
   &amp;lt;key&amp;gt;uuid&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;954ecd40-ca54-11e3-9c1a-0800200c9a66&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;markup.heading.asciidoc&lt;/em&gt; is one of the named elements from the tmLanguage file matching a heading line
(including the ‘=’ signs). That was good enough for me.&lt;/p&gt;

&lt;p&gt;The remaining question was, how to add this symbol list to the existing AsciiDoc sublime-package?
Did I have to re-package the zip? Turns out I don’t have to.
Zipped packages are installed under&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Installed Packages/\&amp;lt;Package Name\&amp;gt;*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To override a file in any of these zip files or add a new file, create&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Packages/\&amp;lt;Package Name\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and place your file in there.
In case of AsciiDoc this means&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Packages/AsciiDoc/Symbol List.tmPreferences
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all very well explained &lt;a href="http://www.sublimetext.com/docs/3/packages.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-04-15:/2014/04/crashplan-on-raspberry-pi-and-wd-mycloud.html</id>
    <title type="html">Building my own backup solution</title>
    <published>2014-04-14T22:00:00Z</published>
    <updated>2014-04-14T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/04/crashplan-on-raspberry-pi-and-wd-mycloud.html"/>
    <content type="html">&lt;h3 id="background"&gt;Background&lt;/h3&gt;

&lt;p&gt;Not so long ago I witnessed complete disk crashes by some of my
 colleagues. Everything was lost and a full reinstall was at order.
Ironically, one of my colleagues was even running a backup software,
but it was so out of date, that once he had an updated version of the
OS installed, he could not find and install a suitable version of the
backup software to restore lost data.&lt;/p&gt;

&lt;p&gt;Initially I smiled, but then I realized that I was in danger as well.
These guys where not technology savvy, but for me working with data
is my daily bread. Still, my disaster backup solution sucked, not to
say was non existent.&lt;/p&gt;

&lt;p&gt;All I had was a USB drive attached to a
&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; available as Samba drive
on my network.&lt;/p&gt;

&lt;h2 id="crashplan"&gt;CrashPlan&lt;/h2&gt;

&lt;p&gt;As a first step I investigated cloud based backup services. I was
hoping that this could easily be setup without any new hardware. Of course having the backup off-site, sounded like a good idea as well. I
investigated several services and the choice is for sure huge our-days.
To get started start with one of comparisons sites out there (like
&lt;a href="http://www.top10cloudstorage.com/review/justcloud/"&gt;this one&lt;/a&gt;).
They offer a good starting point, but if course their rankings have
to be taken with a grain of salt.&lt;/p&gt;

&lt;p&gt;Another thing I noticed - it seems quite custom for these cloud
backup providers to hide their pricing information. Sometimes you have to click around for ages to find it, but other
times I was just unable to find any at all. Take
&lt;a href="http://www.justcloud.com/"&gt;justcloud.com&lt;/a&gt; for example. Where the
heck is the pricing information? To me that’s already a no go zone,
even if the service is good.&lt;/p&gt;

&lt;p&gt;Anyways, I ended up with &lt;a href="http://www.code42.com/crashplan/"&gt;CrashPlan&lt;/a&gt;. Not because I think it is the best service, but more because it offered feature wise the minimum I expected for a reasonable price.&lt;/p&gt;

&lt;p&gt;The strong points for me were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Price - 4 USD / month, if bound for 4 years&lt;/li&gt;
  &lt;li&gt;Unlimited data - that was one of the determining features&lt;/li&gt;
  &lt;li&gt;Free friend to friend backup - a very nice feature which comes in
handy as we’ll &lt;a href="#friend-to-friend"&gt;see later&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the weak side:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very basic Web UI which just allows you do download backed up
files. I was hoping for some more features, for example the ability to view and organize pictures on-line.&lt;/li&gt;
  &lt;li&gt;The client to configure the backup is Java based and needs to run as a GUI&lt;/li&gt;
  &lt;li&gt;Upload speed is not very high. My initial upload (~110 GB) took me
several weeks. The problem might be data
center location related or a
&lt;a href="http://networkrockstar.ca/2013/09/speeding-up-crashplan-backups/"&gt;problem of the software&lt;/a&gt;.
The verdict is still out on this one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="crashplan-on-raspberry-pi"&gt;CrashPlan on Raspberry Pi&lt;/h2&gt;

&lt;p&gt;Once I decided to use Crashplan it was at the time to install it on
my PI. For evaluation purposes I first installed CrashPlan on my
notebook, but in the long run my plan had always been to run Crashplan on the Pi.
Unfortunately, there is where the pain begun. Basically there three
hurdles you have to jump prior to running CrashPlan on a Pi:&lt;/p&gt;

&lt;p&gt;&lt;a name="arm-install"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="#install-java"&gt;Install Java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#install-crashplan"&gt;Install and &lt;em&gt;patch&lt;/em&gt; Crashplan&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="#headless-client"&gt;Configure CrashPlan to run on a headless client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s address these things, in this order.&lt;/p&gt;

&lt;p&gt;&lt;a name="install-java"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="install-java"&gt;Install Java&lt;/h3&gt;

&lt;p&gt;Installing Java via the package manager is actually quite easy. You need some other libraries as well, but that’s not hard.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install openjdk-7-jre-headless build-essential libjna-java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name="install-crashplan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="install-and-patch-crashplan"&gt;Install and patch CrashPlan&lt;/h3&gt;

&lt;p&gt;Now that you have Java installed it is time to download and install the
CrashPlan installer (check the website for the latest version):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; curl -O http://download.crashplan.com/installs/linux/install/CrashPlan/CrashPlan_3.6.3_Linux.tgz
&amp;gt; tar -zxvf CrashPlan_3.6.3_Linux.tgz
&amp;gt; cd CrashPlan-install
&amp;gt; sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can choose the default installation options which will install
CrashPlan into &lt;em&gt;/usr/local/crashplan&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now it at the time to patch
the installation. The library &lt;em&gt;libjtux.so&lt;/em&gt;, which get extracted
into the installation directory does not work on
&lt;a href="http://en.wikipedia.org/wiki/ARM_architecture"&gt;ARM processors&lt;/a&gt;. You
will need to replace it with an ARM compatible version. You can try
to compile a patched
&lt;a href="http://www.basepath.com/aup/jtux"&gt;Jtux&lt;/a&gt; yourself as suggested
&lt;a href="https://0x539.se/crashplan-pa-din-raspberry-pi"&gt;here&lt;/a&gt; or you can downloaded the pre-compiled binary from &lt;a href="http://goo.gl/kYqCLD"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/local/crashplan
$ mv libjtux.so libjtux.so.orig
$ cp &amp;lt;download-dir&amp;gt;/libjtux.so .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you are ready to run CrashPlan on your Pi.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; $ sudo service crashplan start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first startup takes a long time, so be patient. You can check
whether the process is running via:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service crashplan status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or if you want more details check the &lt;em&gt;/usr/local/crashplan/log&lt;/em&gt;
directory which contains multiple log files.&lt;/p&gt;

&lt;p&gt;&lt;a name="headless-client"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="run-crashplan-on-a-headless-client"&gt;Run CrashPlan on a headless client&lt;/h3&gt;

&lt;p&gt;Now that CrashPlan is running you need to configure it and setup the
backup sets. Provided your Pi runs headless (as in my case,)
you will have to solve now the last piece of the puzzle. Setting
up configuration via a headless client. To do so, you will have to
install CrashPlan on your computer as well and then follow the
instructions provided from the CrashPlan support pages on how to
&lt;a href="http://support.code42.com/CrashPlan/Latest/Configuring/Configuring_A_Headless_Client"&gt;Configuring a Headless Client&lt;/a&gt;.
Basically this is done via SSH tunneling and looks something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; ssh -L 4200:localhost:4243 pi@my.pi.ip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Don’t forget to update the &lt;em&gt;ui.properties&lt;/em&gt; file as explained on
the help page).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;If you are like me and cannot remember all these options, add the
following to your &lt;em&gt;~/.ssh/config&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host pi
    HostName &amp;lt;my.pi.ip&amp;gt;
    User pi
    IdentityFile ~/.ssh/id_rsa.pub
    LocalForward 4200 127.0.0.1:4243
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="crashplan-on-wd-my-cloud"&gt;Crashplan on WD My Cloud&lt;/h2&gt;

&lt;p&gt;&lt;a name="friend-to-friend"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="friend-to-friend-backup"&gt;Friend to friend backup&lt;/h3&gt;

&lt;p&gt;So, now I had a a backup on my USB disc attached to the PI and a
remote backup on the CrashPlan servers. But why stop there? It happened
that I also bought a &lt;a href="http://www.wdc.com/en/products/products.aspx?id=1140"&gt;WD My Cloud&lt;/a&gt;
for my office. Given that it is running Linux and you can get root
access, it was not so far fetched to utilize it for CrashPlan as well.
CrashPlan allows friends to share their backup storage with each other
and the beauty is that this feature is free. All you have to do is to
sign up for another free CrashPlan account and use it to share you
backup device. How this works
in detail is described on the CrashPlan support site - &lt;a href="https://support.code42.com/CrashPlan/Latest/Backup/Backing_Up_To_A_Friends_Computer"&gt;Backing Up To A Friends Computer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="install-and-patch-crashplan-1"&gt;Install and patch CrashPlan&lt;/h3&gt;

&lt;p&gt;However, to use friend to friend backup, I needed to install first
CrashPlan on the WD My Cloud. Luckily it is also an ARM based
processor, so the steps for installing CrashPlan are identical to
installing on the Pi. So back to &lt;a href="#arm-install"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="monit"&gt;Monit&lt;/h3&gt;

&lt;p&gt;Almost there. A last thing I did was to installed
&lt;a href="http://mmonit.com/monit/"&gt;Monit&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; apt-get install monit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The reason for installing it was
that I had several JRE crashes with CrashPlan not restarting. Adding
Monit with the following configuration (under &lt;em&gt;/etc/monit/conf.d/crashplan&lt;/em&gt;)
fixed that problem. The crashes
still occur, but don’t bother me too much at the moment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;check process chrashplan with pidfile /usr/local/crashplan/CrashPlanEngine.pid
 start program = "/etc/init.d/crashplan start"
 stop  program = "/etc/init.d/crashplan stop"
 if 5 restarts within 5 cycles then timeout
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;Overall I am happy with my new backup solution. From local USB
only, to two off-site backups, all fully automated, that’s not too bad.
Price-wise I am also happy. For 4 USD per month, I get a unlimited
off-site storage at one of CrashPlan’s servers, plus a free friend to
friend backup using the same technology and configuration.&lt;/p&gt;

&lt;p&gt;I am still disappointed on what I can do with my backup data. I would
expect more from the CrashPlan web and tablet apps.&lt;/p&gt;

&lt;p&gt;The biggest disappointment, however, is the Java client. It feels to
bulky and not flexible to fire up an UI to manage and configure
you backups. Maybe for recovery, but for simple configuration a
command line tool would be of great help. Maybe just as a supplementary
tool. On top of this, I need to keep CrashPlan around on my notebook,
just for running the GUI connecting to my PI.
That would be “ok”, if I could just
use the GUI, but the installation of CrashPlan also installs some
services which I have not been able to turn off yet. Last, but not
least, the use of something like &lt;em&gt;libjtux&lt;/em&gt; is imo questionable. It’s
poor to include something into your Linux distribution package which does then not even run on all installations. This whole fiddling with
the Java GUI became almost a deal breaker for me, but since I worked
it out in the end I’ll stick to it for now. I would love
ChrashPlan to work on this part.&lt;/p&gt;

&lt;p&gt;I hope this helps a few people trying to get CrashPlan to work on a
Raspberry Pi or a WD My Cloud. If you have problems with the
instructions or find other problems with my solution, leave a message.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-03-30:/2014/03/current-state-of-virtual-reality.html</id>
    <title type="html">current state of virtual reality</title>
    <published>2014-03-30T07:00:00Z</published>
    <updated>2014-03-30T07:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/03/current-state-of-virtual-reality.html"/>
    <content type="html">&lt;p&gt;As our loyal readers surely remembers we have touched upon the subject of virtual reality and alternative input devices before. This was a common theme in the first year of this web log. Back in february 2007 when we launched I posted &lt;a href="/2007/02/whats-that-noise-about-second-life.html"&gt;&lt;em&gt;Whats that noise about Second Life?&lt;/em&gt;&lt;/a&gt; with this analysis:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I am pretty sure that this is overhyped now but in a distant future something like this will be the way to surf just 
like cyberpunk prophet William Gibson predicted 23 years ago in the excellent novel Neuromancer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;7 years later and it has not come true. Yet. I haven’t really followed the area lately so when the news of Facebook buying &lt;a href="http://www.oculusvr.com/"&gt;Oculus VR&lt;/a&gt; (along with Sony releasing a similar device) appeared on my radar I thought it fun to explore a bit more. Apparently indie game superstars Mojang &lt;a href="http://notch.net/2014/03/virtual-reality-is-going-to-change-the-world/"&gt;were in talks with Oculus to launch minecraft&lt;/a&gt; into their virtual environment. It seems like these talks were in an early phase and naturally notch et al did not like the idea of talking with facebook instead and ended to collaboration efforts right away. That is sad because getting minecraft into a VR platform would certainly kick start things right away. On the other hand - facebook clearly see the technology as mature enough to bet on and that may be a good sign for virtual reality overall. &lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm6.staticflickr.com/5536/10187117474_ee7e0e8bbd_c.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The guy above is trying out the Oculus Rift. Isn’t it still a bit big? I get steampunkish feelings! Something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm5.staticflickr.com/4154/4989019868_d23e79b65c_z.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Oculus was &lt;a href="https://www.kickstarter.com/"&gt;kickstarted&lt;/a&gt; into existance. Some of its backers may feel a bit disillusioned after the facebook acquisition as &lt;a href="https://twitter.com/avestal"&gt;Andrew Vestal&lt;/a&gt; summed up over on twitter:&lt;/p&gt;

&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p&gt;&amp;quot;I Kickstarted the Oculus Rift, what do I get?&amp;quot; You get a lesson in how capitalism works.&lt;/p&gt;&amp;mdash; Andrew Vestal (@avestal) &lt;a href="https://twitter.com/avestal/statuses/448603100387872768"&gt;March 25, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async="" src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;p&gt;Not unsurprisingly Sony is on the move and unveiled Morpheus at GDC just some weeks ago. It looks slicker (as you would expect) but is basically the same deal conceptually and technically. While it is now possible to get virtual reality visuals there is still lots of work to be done when it comes to interacting with this world. Most of the examples I have seen in my short googling session involves either a classic console controller or some kind of wii-like pointer thing.&lt;/p&gt;

&lt;p&gt;Another fun post to reread 7 years later is &lt;a href="/2007/04/gartner-on-virtual-worlds.html"&gt;&lt;em&gt;Gartner on virtual worlds&lt;/em&gt;&lt;/a&gt; where I bashed a ridiculous prophecy by gartner that by 2011 80% of internet users will have a second life in one of the emerging virtual reality platforms. That didn’t come true - not because it is a bad idea but because interface technologies weren’t mature enough for it. the average user is not impressed by a virtual world accessed via the standard keyboard/mouse/screen peripherals. New ways to interact with computer and cloud is a must to get somewhere when it comes to virtual reality. Also important is the killer application that makes us all want to get inside. I doubt that it will be facebook that delivers this killer application but you never know. Given their huge user base anything can happen. And we will surely continue the &lt;a href="/2013/08/freedom.html"&gt;miserable path of proprietary protocols&lt;/a&gt; for human interaction.&lt;/p&gt;

&lt;p&gt;I leave you with this good overview of the current state of affairs compiled by the verge:&lt;/p&gt;

&lt;iframe width="560" height="315" src="//www.youtube.com/embed/ZZDizTLX3Rc" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;
</content>
  </entry>
</feed>
