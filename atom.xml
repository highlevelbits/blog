<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>atom feed</title>
  <updated>2014-07-20T22:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/atom.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2014-07-21:/2014/07/visions-about-photography.html</id>
    <title type="html">1945 is calling about photography</title>
    <published>2014-07-20T22:00:00Z</published>
    <updated>2014-07-20T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/07/visions-about-photography.html"/>
    <content type="html">&lt;p&gt;This is a small part of the paper &lt;a href="http://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/?single_page=true"&gt;&lt;em&gt;As We May Think&lt;/em&gt; by Vannevar Bush&lt;/a&gt;. Written in 1945 it hinted at hypertext (why I read it) but also this little vision about photography.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The camera hound of the future wears on his forehead a lump a little larger than a walnut. It takes pictures 3 millimeters square, later to be projected or enlarged, which after all involves only a factor of 10 beyond present practice. The lens is of universal focus, down to any distance accommodated by the unaided eye, simply because it is of short focal length. There is a built-in photocell on the walnut such as we now have on at least one camera, which automatically adjusts exposure for a wide range of illumination. There is film in the walnut for a hundred exposures, and the spring for operating its shutter and shifting its film is wound once for all when the film clip is inserted. It produces its result in full color. It may well be stereoscopic, and record with two spaced glass eyes, for striking improvements in stereoscopic technique are just around the corner.&lt;/p&gt;

  &lt;p&gt;The cord which trips its shutter may reach down a man’s sleeve within easy reach of his fingers. A quick squeeze, and the picture is taken. On a pair of ordinary glasses is a square of fine lines near the top of one lens, where it is out of the way of ordinary vision. When an object appears in that square, it is lined up for its picture. As the scientist of the future moves about the laboratory or the field, every time he looks at something worthy of the record, he trips the shutter and in it goes, without even an audible click.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://farm4.staticflickr.com/3809/11760123293_30c54230d8_b.jpg" alt="" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-06-25:/2014/06/mariadb-skip-grant-tables-with-systemctl.html</id>
    <title type="html">How to make systemctl on arch linux start mariadb (mysql) with the --skip-grant-tables flag</title>
    <published>2014-06-24T22:00:00Z</published>
    <updated>2014-06-24T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/06/mariadb-skip-grant-tables-with-systemctl.html"/>
    <content type="html">&lt;p&gt;I have had the opportunity to familiarize myself with mariadb lately. Mariadb is an open source clone of the popular mysql relational database - now owned by oracle. It was very easy to get up and running on arch linux. Just a matter of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pacman -S mariadb
sudo systemctl enable mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it was up and running. However after a while I was unable to log on with the command line tool. I learned how to start the database with the &lt;code&gt;--skip-grant-tables&lt;/code&gt; and found out that the &lt;code&gt;user&lt;/code&gt; table mariadb uses for authentication was empty. Since my use of mariadb is only temporary I decided to not care so much about why this happen. Instead I decided to make sure that the database always starts with the mentioned flag. To do this you need to find the files &lt;code&gt;systemctl&lt;/code&gt; uses for managing its tasks. They (some of them at least) are located in &lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;. There seems to be one file for each thing &lt;code&gt;systemctl&lt;/code&gt; is managing. I found &lt;code&gt;mysqld.service&lt;/code&gt; and added the &lt;code&gt;--skip-grant-tables&lt;/code&gt; flag to the &lt;code&gt;ExecStart&lt;/code&gt; key. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExecStart=/usr/bin/mysqld --pid-file=/run/mysqld/mysqld.pid --skip-grant-tables 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now my database starts without wanting authentication for connections. This is practical in a local development environment but should of course never be used in production.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-06-11:/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html</id>
    <title type="html">Multiple unicorn servers with SSL on nginx</title>
    <published>2014-06-10T22:00:00Z</published>
    <updated>2014-06-10T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html"/>
    <content type="html">&lt;p&gt;A while ago I set up my own &lt;a href="https://www.archlinux.org/"&gt;arch linux&lt;/a&gt; server at &lt;a href="https://www.digitalocean.com/"&gt;digital ocean&lt;/a&gt;. It was some work and I learned a lot in the process. At the moment I have three &lt;a href="http://unicorn.bogomips.org/"&gt;unicorn&lt;/a&gt;-based ruby things running behind &lt;a href="http://nginx.org/"&gt;nginx&lt;/a&gt; on the server. One is built with &lt;a href="http://rubyonrails.org/"&gt;rails&lt;/a&gt; and the other two with &lt;a href="http://www.sinatrarb.com/"&gt;sinatra&lt;/a&gt;. The one with rails is SSL-only. The work of setting up nginx was pretty straightforward but still I had to understand things from several sources so here is a rundown of how I accomplished this.&lt;/p&gt;

&lt;p&gt;nginx is easy to configure. Compared with &lt;a href="https://httpd.apache.org/"&gt;apache&lt;/a&gt; it is a breeze. The configuration is typically placed in &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. The syntax is basically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt; {
    &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there can be nested blocks inside another block. When configuring a server it seems to me that the freedom about how to nest things is rather high as long as it makes sense to the configuration.&lt;/p&gt;

&lt;p&gt;My server is defined inside a &lt;code&gt;http&lt;/code&gt; block that contains all the domains I want to configure for the server. It then got some sensible defaults that I copied from somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    include       mime.types;
    default_type  application/octet-stream;

    ssl_session_cache builtin:1000 shared:SSL:10m;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  120;

    gzip  on;
    gzip_vary on;
    gzip_min_length 500;

    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_types text/plain text/xml text/css
       text/comma-separated-values
       text/javascript application/x-javascript
       application/atom+xml image/x-icon;

    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is some reasonable stuff that I want to have for all my domains. But it is not the focus of this post so you’ll have to read up on it elsewhere. Then I configured the upstream unicorn connection for each domain like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    upstream oneofmydomains_unicorn_server {
        server unix:/var/rack/oneofmydomains/tmp/sockets/unicorn.sock
    }
    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;oneofmydomains_unicorn_server&lt;/code&gt; is just a name that will be used later to bind a domain to this unicorn socket. The file name coming after &lt;code&gt;unix:&lt;/code&gt; should be the one in your unicorn config for that particular server.&lt;/p&gt;

&lt;p&gt;Then comes a &lt;code&gt;server&lt;/code&gt; section for each domain. Lets start with the plain HTTP variant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 80;
        server_name .oneofmydomains.com;

        location / {
            root /var/rack/oneofmydomains/public;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://oneofmydomains_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section starts with the port to listen on this should be 80 in most cases. Then comes the server name describing what domain requests to listen to for this server. This is the part that makes it possible to have several domains running on the same nginx instance. After that another block called &lt;code&gt;location&lt;/code&gt;. It starts with where to find static content. So for each request it will look for files in this folder and serving them - if none is found it will move on to the &lt;code&gt;proxy_pass&lt;/code&gt; unicorn server that should match the name given in the upstream section above. The other &lt;code&gt;proxy_*&lt;/code&gt; directives is needed to give the unicorn server a useful environment.&lt;/p&gt;

&lt;p&gt;So onwards to SSL. One might think that here is where you put in a &lt;code&gt;https&lt;/code&gt; section instead of &lt;code&gt;http&lt;/code&gt; and there is such a construct. I didn’t try it since I got it to work in another way. There are probably several ways to do this.&lt;/p&gt;

&lt;p&gt;To enable SSL you need to get a certificate. If your site is serious you want to buy it from a trusted signatory but if you don’t care about users getting warnings about untrusted certificates you can generate one yourself.&lt;/p&gt;

&lt;p&gt;I used a variant of the server section to setup SSL. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 443;
        server_name .oneofmydomains.com;

        ssl on;

        ssl_certificate     /etc/nginx/www.oneofmydomains.com.cert;
        ssl_certificate_key /etc/nginx/www.oneofmydomains.com.key;
        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;       # default on newer versions
        ssl_ciphers          ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES128-SHA:RC4-SHA:RC4-MD5:ECDHE-RSA-AES256-SHA:AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:DES-CBC3-SHA:AES128-SHA;
        ssl_prefer_server_ciphers on;

        root /var/rack/oneofmydomains/public;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-FORWARDED-PROTO https;
            # pass to the upstream unicorn server mentioned above
            proxy_pass http://memberaid_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see most of the server section is the same. The default port for SSL is 443 so if you want your users to be able to use https://oneofmydomains.com without a port number - this is the way to go. (Just like 80 in the case of normal http.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssl&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt; and the certificate and its key is specified. Then there are lists of protocols and ciphers. This is used when a calling client handshakes with the server. It is just to decide a protocol and cipher to use for the interaction. If there is no match you may have a problem…. The location part is a bit different also with a somewhat different proxy header setup. &lt;/p&gt;

&lt;p&gt;And there you go. Once &lt;code&gt;nginx.conf&lt;/code&gt; is edited you need to restart or reload nginx in order to make the changes effectual. I have enjoyed working with nginx. It is not so hard to understand what to do and the number of pitfalls are kept at a minimum.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-04-26:/2014/04/zoo-city.html</id>
    <title type="html">Zoo city</title>
    <published>2014-04-25T22:00:00Z</published>
    <updated>2014-04-25T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/04/zoo-city.html"/>
    <content type="html">&lt;p&gt;In the middle of reading the immense Game of Thrones serie 
I decided to take a break and read something else and my 
eyes fell on &lt;a href="https://www.goodreads.com/book/show/7163862-zoo-city"&gt;Zoo City&lt;/a&gt; 
by Lauren Beukes that I bought as part of a 
&lt;a href="https://www.humblebundle.com/"&gt;Humble Bundle&lt;/a&gt; a while ago.
It turned out to be a nice break from high fantasy. In Zoo City
lives people that somehow did something wrong and as a result ended
up being attached to an animal. The main character Zinzi carries around a
sloth.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm1.staticflickr.com/23/30950009_8c828d1e1d_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;The stories nemesis is attached to a huge alligator and so on. Having an animal
is seen as a stigma by other persons in society so they tend to live 
in their own areas. Zinzi gets a lot of help from her sloth.
Whenever she is embarking in dubious directions the sloth tries to stop her.
With the animals (I think) also comes a magical skill. Zinzi 
can feel persons missed things so she makes a living out of helping people
find stuff that they have lost. The main story evolves around finding a
missing person and all kinds of intricate turns of events that such a 
weird setting can offer. Enough said about that - read it to find out 
what happens….&lt;/p&gt;

&lt;p&gt;An interesting side plot is Zinzis other work. Being in debt to some criminal
element she works it off by reading and answering scam email replies. She
also impersonate persons that is described in the scam to get more money
out of scam victims. Normally this line of work is seen as something done
by the scum of the earth. But Zinzi is the hero in this story so this 
makes the scam work feel like a normal work. Brillantly done.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.flickr.com/photos/praziquantel/30950009/"&gt;excellent sloth picture&lt;/a&gt; 
is  by &lt;a href="https://www.flickr.com/photos/praziquantel/"&gt;Carol Schaffer&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-04-23:/2014/04/sublime-and-asciidoc.html</id>
    <title type="html">Making symbols available for AsciiDoc syntax in Sublime Text 3</title>
    <published>2014-04-22T22:00:00Z</published>
    <updated>2014-04-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/04/sublime-and-asciidoc.html"/>
    <content type="html">&lt;p&gt;&lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; has become my favorite editor on Mac. It is fast, flexible,
has tons of useful plugins and I can open any file or directory from the command line using &lt;em&gt;subl&lt;/em&gt;.
There are many blog post out there describing the strength of Sublime, so today I just wanted
to focus on a problem for which I could not find a solution out of the box.&lt;/p&gt;

&lt;p&gt;Sublime has become my default editor for Markdown and AsciiDoc. Whereas the symbol navigation via
&lt;em&gt;&amp;lt;ctrl+r&amp;gt;&lt;/em&gt; works just fine for the Markdown plugin, it is not working for AsciiDoc. This is
especially painful when editing long documents where the symbol list gives a fast overview over the
file. In fact the missing symbols were nagging me so much, that I decided to embark into a discovery
journey into the inner workings of Sublime Text.&lt;/p&gt;

&lt;p&gt;In Sublime Text 3 language support (syntax highlighting, snippets, etc) is bundled in a file with the
postfix &lt;em&gt;sublime-package&lt;/em&gt;. Effectively it is just a zip file which you can expand to view its contents.
The main file is &lt;language&gt;.tmLanguage. It contains a whole bunch of regular expressions which capture
and name different parts of the syntax of the language in question. To make symbols work you also need
a file called *Symbol List.tmPreferences* (the name is not relevant I think), which tells Sublime
which of the named syntax parts should be made available via symbols. Exactly this symbol list is missing
in the AsciiDoc plugin (http://github.com/SublimeText/AsciiDoc). After looking at *AsciiDoc.tmLanguage*,
I thought the following should work:&lt;/language&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&amp;gt;
&amp;lt;plist version="1.0"&amp;gt;
&amp;lt;dict&amp;gt;
   &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;Symbol List&amp;lt;/string&amp;gt;
   &amp;lt;key&amp;gt;scope&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;markup.heading.asciidoc&amp;lt;/string&amp;gt;
   &amp;lt;key&amp;gt;settings&amp;lt;/key&amp;gt;
   &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;showInSymbolList&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;1&amp;lt;/string&amp;gt;
   &amp;lt;/dict&amp;gt;
   &amp;lt;key&amp;gt;uuid&amp;lt;/key&amp;gt;
   &amp;lt;string&amp;gt;954ecd40-ca54-11e3-9c1a-0800200c9a66&amp;lt;/string&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;markup.heading.asciidoc&lt;/em&gt; is one of the named elements from the tmLanguage file matching a heading line
(including the ‘=’ signs). That was good enough for me.&lt;/p&gt;

&lt;p&gt;The remaining question was, how to add this symbol list to the existing AsciiDoc sublime-package?
Did I have to re-package the zip? Turns out I don’t have to.
Zipped packages are installed under&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Installed Packages/\&amp;lt;Package Name\&amp;gt;*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To override a file in any of these zip files or add a new file, create&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Packages/\&amp;lt;Package Name\&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and place your file in there.
In case of AsciiDoc this means&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/Library/Application Support/Sublime Text 3/Packages/AsciiDoc/Symbol List.tmPreferences
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all very well explained &lt;a href="http://www.sublimetext.com/docs/3/packages.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</content>
  </entry>
</feed>
