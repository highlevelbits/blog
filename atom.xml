<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>atom feed</title>
  <updated>2014-08-19T22:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/atom.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2014-08-20:/2014/08/hero-driven-development.html</id>
    <title type="html">Hero Driven Development - and what you can do about it</title>
    <published>2014-08-19T22:00:00Z</published>
    <updated>2014-08-19T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/08/hero-driven-development.html"/>
    <content type="html">&lt;p&gt;It happens rather often that I found myself in a negative organizational pattern that I will call &lt;em&gt;hero driven development&lt;/em&gt; in this post. It has several other names: I often call it &lt;em&gt;firefighting&lt;/em&gt; and I have also seen &lt;em&gt;dragon slayer&lt;/em&gt; and &lt;em&gt;cowboy shooting from the hip&lt;/em&gt;. I am sure there are other names. Add yours in the comments!&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm1.staticflickr.com/117/384464432_e373fb5f2d_o.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Main characteristics of this pattern:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a significant hoarded technical debt.&lt;/li&gt;
  &lt;li&gt;a select few able to deal with that debt.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;business as usual&lt;/em&gt; is not normally premiered.&lt;/li&gt;
  &lt;li&gt;the technical debt causes regular crises. A system goes down, some important functionality is broken or something like this.&lt;/li&gt;
  &lt;li&gt;a hero puts his &lt;em&gt;ordinary&lt;/em&gt; work aside for a while and gloriously solves the crises, slays the dragon and puts out the fire.&lt;/li&gt;
  &lt;li&gt;everyone is happy until the next crises.&lt;/li&gt;
  &lt;li&gt;a deficit in reflective exercises ensures that it happens again soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what can we do about it? It is hard to change an organization that has settled on this pattern. The satisfaction of saving the organization whenever there is a crises is impossible to match with &lt;em&gt;business as usual&lt;/em&gt;. It is also important to recognize that this kind of culture rarely is explicit. When asked, no one likes the cycle of crises and salvation. It is stuck on a subconscious level. Here are a number of things to focus on if you find yourself inside this pattern.&lt;/p&gt;

&lt;h3 id="team-solves-crises"&gt;Team solves crises&lt;/h3&gt;
&lt;p&gt;The main problem with hero driven development is that single individuals step in and solve crises when needed. They may even often come from outside the team that normally should be responsible for solving the crises. Decide that the responsibility for solving any crises is the entire team. Make these tasks visible in/on whatever tool you are using for task management. (Preferably a physical board…..)&lt;/p&gt;

&lt;h3 id="pairing"&gt;Pairing&lt;/h3&gt;
&lt;p&gt;This is a good strategy for the long term. If all work happens in pairs the knowledge needed for solving a crises will slowly spread throughout the team. It is also a good tactic for the short term. Decide that no hero solves a crises on his/her own but has to work with someone else so solve it. &lt;/p&gt;

&lt;h3 id="insist-on-retrospectives"&gt;Insist on retrospectives&lt;/h3&gt;
&lt;p&gt;When a pattern like this settles itself solidly it often proves hard to change it. Whenever a crises has been solved, everyone just moves forward, without reflecting on changes to avoid a similar crises in the future. To make the hero pattern visible, retrospectives can be a good tool. Focus on what to improve rather than the failure that caused the crises. Pick one or two things to improve in whatever time frame you are working in. Two weeks may be a good interval. Also, keep retrospectives short. An hour is enough if they are done regularly.&lt;/p&gt;

&lt;h3 id="acknowledge-hero-skills"&gt;Acknowledge hero skills&lt;/h3&gt;
&lt;p&gt;It is important to acknowledge that the heroes excellent skills is not a problem, it is an asset. Find a way to make sure that this skill set comes to good use when working to avoid future crises. Heroes may feel threatened by the disappearance of his/her natural arena. Try to create another arena for the hero to excel in his/her brilliancy.&lt;/p&gt;

&lt;h3 id="workplace-locations"&gt;Workplace locations&lt;/h3&gt;
&lt;p&gt;Behavioral patterns like hero driven development can be inhibited by a conscious placement of workplaces. Put people that can benefit from each other together. Don’t keep the same placement for long periods of time. Changes means that new constellations of people can start interact naturally. Where to put the hero? It probably depends a bit on how you want to solve crises further on. If the hero will be involved than he/she should be located in the midst of things. If not, located out of reach.&lt;/p&gt;

&lt;p&gt;Also, never put several heroes together - spread them out as far away from each other as possible.&lt;/p&gt;

&lt;h3 id="make-the-technical-debt-visible-and-start-reducing-it"&gt;Make the technical debt visible and start reducing it&lt;/h3&gt;
&lt;p&gt;The need for a hero is often caused by an unmanaged technical debt. Try to make this debt as visible as possible in the form of tasks that can be done. They should be as small as possible. This may be really hard but given some thought it is often possible to break the work into smaller bits. When a crises happens, try to think of what parts of the technical debt that caused it and try to prioritize those tasks.&lt;/p&gt;

&lt;p&gt;If nothing else, a start can be to put automated tests on vital parts of the system. It is good for many things:
- it gives you feedback about how the system is feeling
- it makes it possible to refactor
- it increases the understanding, good tests can double as documentation&lt;/p&gt;

&lt;h3 id="measure-absence-of-crises"&gt;Measure absence of crises&lt;/h3&gt;
&lt;p&gt;Finally - it is crises we want to avoid. Introduce metrics. It can be uptime, availability, number of crises a week, magnitude of a crises and so forth. Visibility of progress is very important. This is especially true in an organization that normally don’t acknowledge &lt;em&gt;business as usual&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
Mighty &lt;a href="https://www.flickr.com/photos/mugley/384464432"&gt;dragon photo&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/mugley/"&gt;Jes&lt;/a&gt;.
&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-07-22:/2014/07/addicted-to-complexity.html</id>
    <title type="html">you are addicted to complexity</title>
    <published>2014-07-21T22:00:00Z</published>
    <updated>2014-07-21T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/07/addicted-to-complexity.html"/>
    <content type="html">&lt;p&gt;I keep coming back to this quote from William Gibsons &lt;a href="https://en.wikipedia.org/wiki/All_Tomorrow%27s_Parties_%28novel%29"&gt;&lt;em&gt;All tomorrow’s parties&lt;/em&gt;&lt;/a&gt; again and again. It sums up life neatly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I do not deal in outcomes.”&lt;/p&gt;

  &lt;p&gt;“But you do,” the voice says. “You’ve dealt a few for me, after all. You become an outcome.”&lt;/p&gt;

  &lt;p&gt;“No,” the man says, “I simply discover that place where I am supposed to be.”&lt;/p&gt;

  &lt;p&gt;“You make it sound so simple. I wish that it were that simple for me.”&lt;/p&gt;

  &lt;p&gt;“It could be,” the man says, “but you are addicted to complexity”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-07-21:/2014/07/visions-about-photography.html</id>
    <title type="html">1945 is calling about photography</title>
    <published>2014-07-20T22:00:00Z</published>
    <updated>2014-07-20T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/07/visions-about-photography.html"/>
    <content type="html">&lt;p&gt;This is a small part of the paper &lt;a href="http://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/?single_page=true"&gt;&lt;em&gt;As We May Think&lt;/em&gt; by Vannevar Bush&lt;/a&gt;. Written in 1945 it hinted at hypertext (why I read it) but also this little vision about photography.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The camera hound of the future wears on his forehead a lump a little larger than a walnut. It takes pictures 3 millimeters square, later to be projected or enlarged, which after all involves only a factor of 10 beyond present practice. The lens is of universal focus, down to any distance accommodated by the unaided eye, simply because it is of short focal length. There is a built-in photocell on the walnut such as we now have on at least one camera, which automatically adjusts exposure for a wide range of illumination. There is film in the walnut for a hundred exposures, and the spring for operating its shutter and shifting its film is wound once for all when the film clip is inserted. It produces its result in full color. It may well be stereoscopic, and record with two spaced glass eyes, for striking improvements in stereoscopic technique are just around the corner.&lt;/p&gt;

  &lt;p&gt;The cord which trips its shutter may reach down a man’s sleeve within easy reach of his fingers. A quick squeeze, and the picture is taken. On a pair of ordinary glasses is a square of fine lines near the top of one lens, where it is out of the way of ordinary vision. When an object appears in that square, it is lined up for its picture. As the scientist of the future moves about the laboratory or the field, every time he looks at something worthy of the record, he trips the shutter and in it goes, without even an audible click.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src="https://farm4.staticflickr.com/3809/11760123293_30c54230d8_b.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.flickr.com/photos/47222633@N05/11760123293"&gt;Photo&lt;/a&gt; by flickr user &lt;a href="https://www.flickr.com/photos/47222633@N05/"&gt;Avi Solomon&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-06-25:/2014/06/mariadb-skip-grant-tables-with-systemctl.html</id>
    <title type="html">How to make systemctl on arch linux start mariadb (mysql) with the --skip-grant-tables flag</title>
    <published>2014-06-24T22:00:00Z</published>
    <updated>2014-06-24T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/06/mariadb-skip-grant-tables-with-systemctl.html"/>
    <content type="html">&lt;p&gt;I have had the opportunity to familiarize myself with mariadb lately. Mariadb is an open source clone of the popular mysql relational database - now owned by oracle. It was very easy to get up and running on arch linux. Just a matter of:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pacman -S mariadb
sudo systemctl enable mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it was up and running. However after a while I was unable to log on with the command line tool. I learned how to start the database with the &lt;code&gt;--skip-grant-tables&lt;/code&gt; and found out that the &lt;code&gt;user&lt;/code&gt; table mariadb uses for authentication was empty. Since my use of mariadb is only temporary I decided to not care so much about why this happen. Instead I decided to make sure that the database always starts with the mentioned flag. To do this you need to find the files &lt;code&gt;systemctl&lt;/code&gt; uses for managing its tasks. They (some of them at least) are located in &lt;code&gt;/usr/lib/systemd/system&lt;/code&gt;. There seems to be one file for each thing &lt;code&gt;systemctl&lt;/code&gt; is managing. I found &lt;code&gt;mysqld.service&lt;/code&gt; and added the &lt;code&gt;--skip-grant-tables&lt;/code&gt; flag to the &lt;code&gt;ExecStart&lt;/code&gt; key. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExecStart=/usr/bin/mysqld --pid-file=/run/mysqld/mysqld.pid --skip-grant-tables 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now my database starts without wanting authentication for connections. This is practical in a local development environment but should of course never be used in production.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-06-11:/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html</id>
    <title type="html">Multiple unicorn servers with SSL on nginx</title>
    <published>2014-06-10T22:00:00Z</published>
    <updated>2014-06-10T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/06/multiple-unicorn-servers-with-ssl-on-nginx.html"/>
    <content type="html">&lt;p&gt;A while ago I set up my own &lt;a href="https://www.archlinux.org/"&gt;arch linux&lt;/a&gt; server at &lt;a href="https://www.digitalocean.com/"&gt;digital ocean&lt;/a&gt;. It was some work and I learned a lot in the process. At the moment I have three &lt;a href="http://unicorn.bogomips.org/"&gt;unicorn&lt;/a&gt;-based ruby things running behind &lt;a href="http://nginx.org/"&gt;nginx&lt;/a&gt; on the server. One is built with &lt;a href="http://rubyonrails.org/"&gt;rails&lt;/a&gt; and the other two with &lt;a href="http://www.sinatrarb.com/"&gt;sinatra&lt;/a&gt;. The one with rails is SSL-only. The work of setting up nginx was pretty straightforward but still I had to understand things from several sources so here is a rundown of how I accomplished this.&lt;/p&gt;

&lt;p&gt;nginx is easy to configure. Compared with &lt;a href="https://httpd.apache.org/"&gt;apache&lt;/a&gt; it is a breeze. The configuration is typically placed in &lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;. The syntax is basically:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt; {
    &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there can be nested blocks inside another block. When configuring a server it seems to me that the freedom about how to nest things is rather high as long as it makes sense to the configuration.&lt;/p&gt;

&lt;p&gt;My server is defined inside a &lt;code&gt;http&lt;/code&gt; block that contains all the domains I want to configure for the server. It then got some sensible defaults that I copied from somewhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    include       mime.types;
    default_type  application/octet-stream;

    ssl_session_cache builtin:1000 shared:SSL:10m;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  120;

    gzip  on;
    gzip_vary on;
    gzip_min_length 500;

    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    gzip_types text/plain text/xml text/css
       text/comma-separated-values
       text/javascript application/x-javascript
       application/atom+xml image/x-icon;

    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see this is some reasonable stuff that I want to have for all my domains. But it is not the focus of this post so you’ll have to read up on it elsewhere. Then I configured the upstream unicorn connection for each domain like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    upstream oneofmydomains_unicorn_server {
        server unix:/var/rack/oneofmydomains/tmp/sockets/unicorn.sock
    }
    ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;oneofmydomains_unicorn_server&lt;/code&gt; is just a name that will be used later to bind a domain to this unicorn socket. The file name coming after &lt;code&gt;unix:&lt;/code&gt; should be the one in your unicorn config for that particular server.&lt;/p&gt;

&lt;p&gt;Then comes a &lt;code&gt;server&lt;/code&gt; section for each domain. Lets start with the plain HTTP variant:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 80;
        server_name .oneofmydomains.com;

        location / {
            root /var/rack/oneofmydomains/public;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_pass http://oneofmydomains_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This section starts with the port to listen on this should be 80 in most cases. Then comes the server name describing what domain requests to listen to for this server. This is the part that makes it possible to have several domains running on the same nginx instance. After that another block called &lt;code&gt;location&lt;/code&gt;. It starts with where to find static content. So for each request it will look for files in this folder and serving them - if none is found it will move on to the &lt;code&gt;proxy_pass&lt;/code&gt; unicorn server that should match the name given in the upstream section above. The other &lt;code&gt;proxy_*&lt;/code&gt; directives is needed to give the unicorn server a useful environment.&lt;/p&gt;

&lt;p&gt;So onwards to SSL. One might think that here is where you put in a &lt;code&gt;https&lt;/code&gt; section instead of &lt;code&gt;http&lt;/code&gt; and there is such a construct. I didn’t try it since I got it to work in another way. There are probably several ways to do this.&lt;/p&gt;

&lt;p&gt;To enable SSL you need to get a certificate. If your site is serious you want to buy it from a trusted signatory but if you don’t care about users getting warnings about untrusted certificates you can generate one yourself.&lt;/p&gt;

&lt;p&gt;I used a variant of the server section to setup SSL. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
    ....
    server {
        listen 443;
        server_name .oneofmydomains.com;

        ssl on;

        ssl_certificate     /etc/nginx/www.oneofmydomains.com.cert;
        ssl_certificate_key /etc/nginx/www.oneofmydomains.com.key;
        ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;       # default on newer versions
        ssl_ciphers          ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES128-SHA:RC4-SHA:RC4-MD5:ECDHE-RSA-AES256-SHA:AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:DES-CBC3-SHA:AES128-SHA;
        ssl_prefer_server_ciphers on;

        root /var/rack/oneofmydomains/public;

        location / {
            proxy_set_header Host $http_host;
            proxy_set_header X-FORWARDED-PROTO https;
            # pass to the upstream unicorn server mentioned above
            proxy_pass http://oneofmydomains_unicorn_server;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see most of the server section is the same. The default port for SSL is 443 so if you want your users to be able to use https://oneofmydomains.com without a port number - this is the way to go. (Just like 80 in the case of normal http.)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssl&lt;/code&gt; is &lt;code&gt;on&lt;/code&gt; and the certificate and its key is specified. Then there are lists of protocols and ciphers. This is used when a calling client handshakes with the server. It is just to decide a protocol and cipher to use for the interaction. If there is no match you may have a problem…. The location part is a bit different also with a somewhat different proxy header setup. &lt;/p&gt;

&lt;p&gt;And there you go. Once &lt;code&gt;nginx.conf&lt;/code&gt; is edited you need to restart or reload nginx in order to make the changes effectual. I have enjoyed working with nginx. It is not so hard to understand what to do and the number of pitfalls are kept at a minimum.&lt;/p&gt;
</content>
  </entry>
</feed>
