<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>atom feed</title>
  <updated>2013-06-05T01:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/atom.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2013-06-05:/2013/06/css_sibling.html</id>
    <title type="html">css sibling operator (folding divs)</title>
    <published>2013-06-05T01:00:00Z</published>
    <updated>2013-06-05T01:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/06/css_sibling.html"/>
    <content type="html">&lt;p&gt;I have been fiddling with CSS a lot in my current client project. I am no ninja yet but I am getting hold of the elementary stuff at least. Today I made one radio button show a div and another one hide it. To be able to do this you need to know about the sibling operator &lt;code&gt;~&lt;/code&gt; that is used to find an element matching the selector that is &lt;em&gt;after&lt;/em&gt; the main rule. Consider this markup snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;input checked="checked" class="fold_open" type="radio" value="open" /&amp;gt;
&amp;lt;input class="fold_closed" type="radio" value="closed" /&amp;gt;
&amp;lt;div class="foldee"&amp;gt;
  &amp;lt;!-- some awesome markup here --&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Two radio buttons with classes &lt;code&gt;fold_open&lt;/code&gt; and &lt;code&gt;fold_closed&lt;/code&gt; respectively. One div with the class &lt;code&gt;foldee&lt;/code&gt;. To make the div fold when &lt;code&gt;fold_closed&lt;/code&gt; selected and unfold when &lt;code&gt;fold_open&lt;/code&gt; is selected - add this css:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.fold_open:checked ~ .foldee {
  display: block;
}

.fold_closed:checked ~ .foldee {
  display: none;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://www.flickr.com/photos/henry-gail/2844798054"&gt;&lt;img src="http://farm4.staticflickr.com/3221/2844798054_37bc48f208_m.jpg" style="float:right" /&gt;&lt;/a&gt;
This means that when the class &lt;code&gt;fold_open&lt;/code&gt; is checked (works for radio buttons and check boxes) its sibling &lt;code&gt;foldee&lt;/code&gt; will be shown and when &lt;code&gt;fold_closed&lt;/code&gt; is checked it will disappear. A tricky thing with the sibling selector is that it only finds elements after its left hand operator. So if you want to hide something above you will have to rearrange your markup and use inspired styling to make it show up in the right place.&lt;/p&gt;

&lt;p&gt;This will probably not work in &lt;em&gt;some&lt;/em&gt; browsers mayhaps causing a problem depending on your use case and your user base. For a version that is guaranteed to work you will have to write some scripts instead. The amount of code with something like jquery is about the same. But I found it a bit more elegant to do it with css.&lt;/p&gt;

&lt;p&gt;The car in the photo is an &lt;a href="http://en.wikipedia.org/wiki/Alfa_Romeo_1900"&gt;Alfa Romeo 1900 CSS&lt;/a&gt; and it is just here for looks. Find a good photo about css….. It was shot by flickr user Henry Figueroa.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-06-03:/2013/06/pirate_cinema.html</id>
    <title type="html">pirate cinema</title>
    <published>2013-06-03T19:00:00Z</published>
    <updated>2013-06-03T19:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/06/pirate_cinema.html"/>
    <content type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/joi/549393610"&gt;&lt;img src="http://farm2.staticflickr.com/1350/549393610_f6119e19fc_m.jpg" style="float:left" /&gt;&lt;/a&gt;
So I just finished &lt;a href="http://www.goodreads.com/book/show/13539171-pirate-cinema"&gt;Pirate Cinema&lt;/a&gt; by &lt;a href="http://craphound.com/"&gt;Cory Doctorow&lt;/a&gt;. A thought provoking quick read.  It is set in a not so distant future where things have gone a little bit more out of hand. In particular the media lobby has succeeded in adding some invasive legislation in the copyright land. So in this future your internet can be turned off if you illegally download copyrighted content. The main character - 16 year old Trent - manages to get his families internet turned off and then runs of to London for some serious squatting and the important fight for reasonable legislation. It turns out fine in some ways - in other ways not so good. Highlights are the improvised cinema in a cemetery where films are projected from trees onto the wall of a chapel, another highlight are mosquito zappers - a kind of hat with built in mosquito zapping lasers. The attention to technical detail is really fun.&lt;/p&gt;

&lt;p&gt;This novel is a good solid voice in frightening times where our creative freedom is at stake. Lets hope our ending is a bit better than the setting of Pirate Cinema. This was my first encounter with Cory Doctorow and I certainly will try to read more of his work.&lt;/p&gt;

&lt;p&gt;A final word to legislators out there - try to make this world a fun place to live in. Of course - artists should get what they are due - but corporations making a profit out of limiting our creativity should just go away.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-05-21:/2013/05/agila_sverige.html</id>
    <title type="html">agila sverige 2013</title>
    <published>2013-05-21T21:00:00Z</published>
    <updated>2013-05-21T21:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/05/agila_sverige.html"/>
    <content type="html">&lt;p&gt;It was time for my second &lt;a href="http://www.agilasverige.se"&gt;agila sverige&lt;/a&gt;. I attended three years ago and wrote &lt;a href="highlevelbits.com/2010/05/agila-sverige-reflections.html‎"&gt;a couple&lt;/a&gt; &lt;a href="www.highlevelbits.com/2010/05/agila-sverige-day-2-refelections.html‎"&gt;of reports&lt;/a&gt; so I will try to do something similar this year.&lt;/p&gt;

&lt;p&gt;A difference this year was finding me on the speakers list. My talk was about not writing too much dry code and it went very well. I got very nice and insightful comments afterwards so I am happy about it. &lt;a href="http://www.flickr.com/photos/aigle_dore/5951683083"&gt;&lt;img src="http://farm7.staticflickr.com/6123/5951683083_7f15fe4bba.jpg" style="float:left" /&gt;&lt;/a&gt; It was some time since I did this kind of public speaking so I was a bit nervous. But as always I got comments on how calm I seemed. I am apparently good at hiding my nervousness. I definitely need to do this more often.&lt;/p&gt;

&lt;p&gt;A theme that hasn’t gone away since the last time I attended is the reorientation of &lt;em&gt;old&lt;/em&gt; roles in the new agile world. The old way of thinking in roles seems to be hard to get rid of. This year I sense that the focus on management has faded a bit. Maybe the roles &lt;em&gt;product owner&lt;/em&gt; and &lt;em&gt;scrum master&lt;/em&gt; has settled a bit? I heard other say the opposite so maybe I just avoided those sessions. Talking about testing prevails as before but it seems like test automation (and automation overall) is more of a given now. A definite trend is the need to talk about requirements gathering. I suspect that teams that has been doing agile for a while have a clear sense of lacking overview images/sketches/diagrams of their system. On the other hand what does &lt;em&gt;doing agile&lt;/em&gt; even mean these days….?!?&lt;/p&gt;

&lt;p&gt;Some talks worthy of mention (that would be all talks but then this post would be sooooo long):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.impactmapping.org/"&gt;Impact mapping&lt;/a&gt; was one of the new things for me. &lt;a href="http://blog.staffannoteberg.com/"&gt;Staffan Nöteberg&lt;/a&gt; kicked of the conference by using it to explain how to avoid expensive no-result projects.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://blog.crisp.se/author/peterantman"&gt;Peter Antman&lt;/a&gt; talked about &lt;a href="http://blog.crisp.se/2013/05/20/peterantman/software-development-and-tragedy-of-the-commons"&gt;code ownership and the tragedy of the commons&lt;/a&gt;. Stuffed with references to high knowledge he ended with a list of things that can make &lt;em&gt;commons&lt;/em&gt; work.&lt;/li&gt;
  &lt;li&gt;One entire talk in rhyme by &lt;a href="http://www.marcusoft.net/"&gt;Marcus Hammarberg&lt;/a&gt; about always failing when introducing an agile way of working in large organisation.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/m8rt"&gt;Martin Christensen&lt;/a&gt; had an improved version of the user story format that looked really nice.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://jimmyjanlen.wordpress.com/"&gt;Jimmy Janlén&lt;/a&gt; alias the evil coach made a great performance about how to continue &lt;em&gt;bad&lt;/em&gt; practices in the name of agile. Very entertaining.&lt;/li&gt;
  &lt;li&gt;How to shave that yak &lt;a href="http://www.flickr.com/photos/bdearth/4881180471"&gt;&lt;img src="http://farm5.staticflickr.com/4081/4881180471_3628d6b4ff_m.jpg" style="float:right" /&gt;&lt;/a&gt; was explained in a humorous yet thought provoking way by &lt;a href="https://twitter.com/gabriel_f"&gt;Gabriel Falkenberg&lt;/a&gt;. &lt;em&gt;It might become hairy!&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;The &lt;a href="http://agical.se/"&gt;agical crew&lt;/a&gt; represented by &lt;a href="https://twitter.com/villesv"&gt;Ville Svärd&lt;/a&gt; and &lt;a href="https://twitter.com/tobbeanderberg"&gt;Tobbe Anderberg&lt;/a&gt; presented &lt;a href="http://mobprogramming.org/"&gt;mob programming&lt;/a&gt;. Sort of pair programming taken one huge step further. The idea is to let the whole team program together on one (1) computer. This is truly innovative and may actually be a good thing to do. The increase in quality will be huge, the learning curve of team members drastically improved not to mention the happiness. Will it be more productive than the &lt;em&gt;normal&lt;/em&gt; way? Hard to tell. Maybe not but the increase in quality may well be worth it anyway. I hope I will be able to try it soonish in some setting.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/andreas_larsson"&gt;Andreas Larsson&lt;/a&gt; declared the end of &lt;a href="http://theagilerevolution.com/"&gt;the agile revolution&lt;/a&gt; and prompted us to start reigning. There are no true opponents of agile left. We all like it! I wonder if this is because it has been watered out over the years or are we truly changing?&lt;/li&gt;
  &lt;li&gt;The ending lightning talk was an amazing performance by &lt;a href="https://twitter.com/adamkillander"&gt;Adam Killander&lt;/a&gt; where he acted out a developer that had to choose between new development and maintenance. In the end he was preaching fundamentalist maintenance to the masses. Check it out in &lt;a href="https://agilasverige.solidtango.com"&gt;them streams&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to talks there were a bunch of open spaces of which I only attended five due to cloning incapabilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How to write requirements. I went to this one mostly to hear how we talk about this nowadays. I found that not much has changed but there are people executing their specs (cucumber sorta) - that was nice to hear.&lt;/li&gt;
  &lt;li&gt;About getting stuck in technical decisions. We often decide what technical solution to choose based on what we user before, what skill set we have or what seems to be the common choice at the moment rather than base on what technology best suits the problem at hand. One example of this is how we user object oriented techniques to build web sites - a very functional problem space.&lt;/li&gt;
  &lt;li&gt;The mob programming talk extended into a very creative open space.&lt;/li&gt;
  &lt;li&gt;About competence. Andreas Larsson showed how he divides competence into the three sub parts technical, domain and personality. An interesting discussion around this.&lt;/li&gt;
  &lt;li&gt;The final one was about (and with) senior developers. Why are they not in abundance? Why do many move on to other roles? How sad is it that we are losing a fair bit of knowledge in this way? Thought provoking and yet another reminder to stay in continuous learning mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some obligatory ending comments about &lt;a href="http://meetingroom.se/"&gt;the venue&lt;/a&gt;. This one works better than the old one. The two rooms used for the two tracks are next to each other so it is easy to change between in the 2 minute breaks. The food has been good and coffee has been available in abundance. The dinner was served in the main conference room which made it all stick together nicely.&lt;/p&gt;

&lt;p&gt;The conference ended with sorta a retrospective. Post-its on the wall and on the chest and some mingling talking about experiences from the conference. Great to just talk about how great it was for a couple of minutes.&lt;/p&gt;

&lt;p&gt;Huge amounts of thanks to the organizers.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-05-04:/2013/05/camera_fun.html</id>
    <title type="html">cool photos</title>
    <published>2013-05-04T21:03:00Z</published>
    <updated>2013-05-04T21:03:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/05/camera_fun.html"/>
    <content type="html">&lt;p&gt;Had some fun with the camera today.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm9.staticflickr.com/8267/8708350808_05f235587c_z.jpg" alt="" /&gt;
&lt;img src="http://farm9.staticflickr.com/8418/8708352708_9a36fbda12_z.jpg" alt="" /&gt;
&lt;img src="http://farm9.staticflickr.com/8256/8708354468_e350932458_z.jpg" alt="" /&gt;
&lt;img src="http://farm9.staticflickr.com/8414/8707233857_a24b5f5555_z.jpg" alt="" /&gt;
&lt;img src="http://farm9.staticflickr.com/8400/8708357766_bd655013f5_z.jpg" alt="" /&gt;
&lt;img src="http://farm9.staticflickr.com/8279/8707236779_d7c966d82d_z.jpg" alt="" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-04-23:/2013/04/tdding_prime_detection.html</id>
    <title type="html">detecting prime numbers with Test Driven Development</title>
    <published>2013-04-22T22:00:00Z</published>
    <updated>2013-04-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/04/tdding_prime_detection.html"/>
    <content type="html">&lt;p&gt;This tuesday I held a half day workshop on Test Driven Development for a group of developers
at Smart Bears Stockholm office. I prepared by writing a
&lt;a href="/2013/04/what_is_tdd.html"&gt;generic post about TDD&lt;/a&gt; explaining the main principles. During the
session we used prime number detection as an example kata. This is a very simple problem and
as such useful to show how to do proper TDD. On the other hand there isn’t much of real world
problems in there. We started with the tiniest test:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void oneIsPrime(){
    assertTrue("1 should be a prime", Prime.isPrime(1));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and implemented this with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Prime {
  public static boolean isPrime(int number){
    return true;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This piece of code is the best thing that fulfills our test so there is no need to get into the
refactor phase at this stage. The language is called Java if you don’t recognize it.&lt;/p&gt;

&lt;p&gt;The next test takes the first non prime number and test it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void fourIsNotPrime(){
    assertFalse("4 should not be a prime", Prime.isPrime(4));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;implemented with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static boolean isPrime(int number){
    if( number == 4 ) return false;
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now this can be refactored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static boolean isPrime(int number){
    return number != 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the refactoring doesn’t add functionality - it just makes the code easier to read. Add another
non-prime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Test
public void nineIsNotPrime() {
    assertNotPrime(9);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and helper methods to make the test code a little bit easier to read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void assertNotPrime(int number){
    String message = "" + number + " should not be a prime";
    assertFalse(message, Prime.isPrime(number));
}

public void assertPrime(int number){
    String message = "" + number + " should be a prime";
    assertTrue(message, Prime.isPrime(number));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually in the workshop we didn’t break out the asserts into methods but went straight for the
next test code refactoring. The code under test is still naive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static boolean isPrime(int number){
    if( number == 4 || number == 9 ) return false;
    return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we felt the need to introduce an easier way to test many combinations at once. This is a bit awkward in
Java and come much more natural in a dynamic language. We used the junit runner Parameterized to be able to
have one test for each prime we’d like to test while reusing as much of the test code as possible. Here is the
implementation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package prime;

import java.util.*;

import org.junit.*;
import org.junit.runner.*;
import org.junit.runners.*;
import org.junit.runners.Parameterized.*;

import static org.junit.Assert.*;

@RunWith(Parameterized.class)
public class TestPrime {
    private int number;
    private boolean isPrime;

    public TestPrime(int number, boolean isPrime){
        this.number = number;
        this.isPrime = isPrime;
    }

    @Parameters
    public static Collection&amp;lt;Object[]&amp;gt; bunchOfPrimes(){
        return Arrays.asList(new Object[][]{
            {1, true},
            {2, true},
            {3, true},
            {4, false},
            {7, true},
            {9, false},
            {10, false},
            {13, true},
            {15, false}
        });
    }

    @Test
    public void isPrime(){
        if(this.isPrime){
            assertPrime(this.number);
        } else {
            assertNotPrime(this.number);
        }
    }

    public void assertPrime(int number){
        String message = "" + number + " should be a prime";
        assertTrue(message, Prime.isPrime(number));
    }

    public void assertNotPrime(int number){
        String message = "" + number + " should not be a prime";
        assertFalse(message, Prime.isPrime(number));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the code that I prepared before the session. When we programmed it in the session we ended up with
using &lt;code&gt;assertEquals&lt;/code&gt; instead of having the helper methods and I think that was a nicer approach.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Parameterized&lt;/code&gt; requires a method that returns test data. It should have the awkward return type
&lt;code&gt;Collection&amp;lt;Object[]&amp;gt;&lt;/code&gt; - that is a collection of object arrays. Each member of the array should have
data so that the test class constructor can be called. In our case there is a number - the prime candidate -
and a boolean indicating if it is expected to be a prime or not. The runner creates one instance per
data point and runs all Test methods on that one. In our case there is only the &lt;code&gt;isPrime&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Now all there is left is to implement the real stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static boolean isPrime(int number){
  for(int i = 2; i &amp;lt; number; i++) {
    if(number % i == 0) {
      return false;
    }
  }
  return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a somewhat refactored solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static boolean isPrime(int number){
  for(int i = 2; i &amp;lt;= sqrt(number); i++) {
    int remainder = number % i;
    if(remainder == 0) {
      return false;
    }
  }
  return true;
}

private static double sqrt(int number){
  return Math.sqrt(number);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a fun but naive exercise. You can follow this code step-by-step in
&lt;a href="https://github.com/froderik/javaprime"&gt;this github repo&lt;/a&gt;.
There are commits and tags for each step in the TDD cycle. There is also a slightly more advanced example
with prime factorizations.&lt;/p&gt;
</content>
  </entry>
</feed>
