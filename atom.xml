<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>atom feed</title>
  <updated>2014-11-19T23:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/atom.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2014-11-20:/2014/11/markdown-readme-from-grails.html</id>
    <title type="html">Serving up that readme with grails</title>
    <published>2014-11-19T23:00:00Z</published>
    <updated>2014-11-19T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/11/markdown-readme-from-grails.html"/>
    <content type="html">&lt;p&gt;So you wrote a nice readme for your grails project and realized that it would be nice to serve it at some or other URL on your site. Yeah - happened to me too. So here is what I did.&lt;/p&gt;

&lt;p&gt;First we need to add markdown capabilities to our grails project. For that we use the &lt;a href="https://grails.org/plugin/markdown"&gt;markdown plugin&lt;/a&gt;. Put the following line in your &lt;code&gt;BuildConfig.groovy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile ":markdown:1.1.1"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next - &lt;a href="https://stackoverflow.com/questions/12835568/using-markdown-as-a-grails-view"&gt;which may be tricky&lt;/a&gt; - we need to have the markdown file in our &lt;code&gt;views&lt;/code&gt; directory for grails to find them. The file also need to end with &lt;code&gt;gsp&lt;/code&gt;. The easiest way to accomplish this is to make a soft link (yes - git preserves soft links….. given your coworkers also is on some kind of unix):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd grails-app/views/readme
ln -s ../../../readme.md readme.gsp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need some kind of route. I decide to go for a &lt;code&gt;readme&lt;/code&gt; path with its own controller but this can be done in several ways. Put this in your &lt;code&gt;UrlMappings.groovy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"/readme"(controller:"readme")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and with that goes a &lt;code&gt;ReadmeController&lt;/code&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ReadmeController {
  def readme() {
    render(layout: 'markdown', view: 'readme')
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass the view to &lt;code&gt;render&lt;/code&gt; and also a special layout needed to trigger markdown. Here is the essential part of the layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;markdown:renderHtml&amp;gt;
        &amp;lt;g:layoutBody/&amp;gt;
    &amp;lt;/markdown:renderHtml&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go with a nice path to your readme.&lt;/p&gt;

&lt;p&gt;This is admittedly a bit cumbersome but pretty straightforward. The other approach is to read the markdown programmatically and do the markup processing in a controller. Probably pros and cons with both approaches.&lt;/p&gt;

&lt;p&gt;(On a side note. At times like this I miss Ruby. I did &lt;a href="https://github.com/froderik/anyrest/blob/master/anyrest.rb"&gt;pretty much the same thing&lt;/a&gt; with &lt;a href="http://www.sinatrarb.com/"&gt;sinatra&lt;/a&gt; a while ago. Add a gem and &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get '/' do
    markdown :README
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the “controller”. Much easier.)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-11-11:/2014/11/100-continue.html</id>
    <title type="html">Posting large files over SSL</title>
    <published>2014-11-10T23:00:00Z</published>
    <updated>2014-11-10T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/11/100-continue.html"/>
    <content type="html">&lt;p&gt;When posting a file in a complex setup with several layers I encountered a problem in a Java-&amp;gt;Apache interaction. I got this error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Tue Nov 11 14:55:57 2014] [error] [client &amp;lt;ip&amp;gt;] request body exceeds maximum size (131072) for SSL buffer, referer: &amp;lt;referrer-url&amp;gt;
[Tue Nov 11 14:55:57 2014] [error] [client &amp;lt;ip&amp;gt;] could not buffer message body to allow SSL renegotiation to proceed, referer: &amp;lt;referrer-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some googling where &lt;a href="https://stackoverflow.com/questions/14281628/ssl-renegotiation-with-client-certificate-causes-server-buffer-overflow"&gt;this stackoverflow post&lt;/a&gt; proved the most informative I learned that the upper limit for file size over SSL is rather low - just some 131702 bytes. The post lists several ways of solving the problem. I thought the header way was the neatest. I just added the header &lt;code&gt;Expect: 100-continue&lt;/code&gt; to the call and the problem disappeared. The value of the header is rather cryptic but well documented in &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20"&gt;the specs&lt;/a&gt;. Basically it tells the server to finish SSL negotiations before downloading the full request body from the client.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-10-23:/2014/10/smtp-mocking.html</id>
    <title type="html">Mocking SMTP when testing a black box of software</title>
    <published>2014-10-22T22:00:00Z</published>
    <updated>2014-10-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/10/smtp-mocking.html"/>
    <content type="html">&lt;p&gt;So I wrote a micro service that gets a REST call and sends a mail or a SMS and I wanted to have some nice black box tests in place. &lt;/p&gt;

&lt;h3 id="the-test"&gt;The test&lt;/h3&gt;

&lt;p&gt;So my test would &lt;code&gt;POST&lt;/code&gt; to a web service, then wait for a little while and then check if a mail was sent. The test runs remotely from a build server so everything it needs needs to be accesible over HTTP. So I decided to have a &lt;em&gt;real&lt;/em&gt; SMTP server running on the server writing files to a directory that a web server can pick up and show to the test. And a static web server serving the mail files in that directory. Pseudo code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;random_id = UUID.generate()
message = subject: random_id, message: 'long rant'
server.post message
wait 1000
list_of_mails = staticServer.get
assert list_of_mails =~ random_ud
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dummy-smtp-server"&gt;Dummy SMTP server&lt;/h3&gt;

&lt;p&gt;I looked around on the Internet for a while. I used a Java based graphical dummy server locally called &lt;a href="https://nilhcem.github.io/FakeSMTP/"&gt;FakeSMTP&lt;/a&gt;. It is really useful when doing stuff in a graphical environment. Now I needed something headless instead. My eyes fell on a &lt;a href="https://github.com/maestrofjp/Dummy-SMTP"&gt;small Python script&lt;/a&gt; that did almost exactly what I wanted. The only thing missing was the naming of the files. In order to trace a mail through the server onto the SMTP server I needed something unique. I decided to put a UUID as the subject. The Python script needed &lt;a href="https://github.com/froderik/Dummy-SMTP"&gt;a little tweak&lt;/a&gt; to get the subject (as well as the timestamp) onto the filename.&lt;/p&gt;

&lt;p&gt;The script only works with Python 2 so make sure you have it….. I am sure it is easy to change for Python 3 for a pythonista.&lt;/p&gt;

&lt;h3 id="simple-file-serving-web-server"&gt;Simple file serving web server&lt;/h3&gt;

&lt;p&gt;Since the system &lt;strong&gt;under test&lt;/strong&gt; lives in a tomcat I started out trying to make tomcat serve static files from the folder where the SMTP server stuffs mail files. It is supposed to work but I had some problems and gave up deciding to search for a simpler solution. And suddenly there it was. Look at &lt;a href="https://docs.python.org/2/library/simplehttpserver.html"&gt;this&lt;/a&gt; beauty:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get yourself into a directory from where you want to serve static files - type the above into the terminal and you are up and running on port &lt;code&gt;8000&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id="closing-rant-about-naming"&gt;Closing rant about naming&lt;/h3&gt;

&lt;p&gt;Integration tests can mean many things. There seem to be no common vocabulary within the testing discipline. In Grails - the framework used in the micro service here - integration testing means talking directly to a controller and stubbing away third party dependencies. So the meaning here is to test the different parts and of a system together. (As opposite to unit testing.) For me integration testing normally means testing a couple of systems together and accessing it from the outside (normally with HTTP in some form). This confusion about names led me to use &lt;em&gt;black box testing&lt;/em&gt; in this article. Using another name for this does not really help but when talking about black boxes it is obvious that we are not testing or knows about any internals - a good thing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-09-23:/2014/09/mistakes.html</id>
    <title type="html">The benefit of mistakes</title>
    <published>2014-09-22T22:00:00Z</published>
    <updated>2014-09-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/09/mistakes.html"/>
    <content type="html">&lt;p&gt;I stumbled upon a great post over at &lt;a href="http://www.farnamstreetblog.com/"&gt;Farnam Street&lt;/a&gt; pointing out the importance of making mistakes. Nothing new here but really good to get a reminder now and then:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just because we’ve lost our way doesn’t mean that we are lost forever. In the end, it’s not the failures that define us so much as how we respond.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read more along these lines in &lt;a href="http://www.farnamstreetblog.com/2014/09/mistakes/"&gt;the post&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-09-17:/2014/09/fitting-the-role.html</id>
    <title type="html">Do I fit the role or does the role fit me?</title>
    <published>2014-09-16T22:00:00Z</published>
    <updated>2014-09-16T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/09/fitting-the-role.html"/>
    <content type="html">&lt;p&gt;I got a request for recruitment by email. And as usual the recruiter has determined that I fit a certain role very well. In this case and as always there are no consideration whether the role fits me. The recruiter asked me:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I believe that your profile matches the requirements for this role. And
I´am contacting you to hear if this role is consistent with your
background, and if so, are you interested to be presented to my client?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and my response:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is indeed true that my profile matches this role. Also important to
figure out is if the role matches me. (A thing recruiters seldom
consider.) And in this case (as with a large number of similar requests
over the years) it does not. Going from freelancing to being an employed
gun for hire is not tempting at all.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
</feed>
