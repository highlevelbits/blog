<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>rss feed</title>
  <updated>2013-10-03T01:59:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/rss.xml"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2013-10-03:/2013/10/single_point_logging.html</id>
    <title type="html">single point logging with go</title>
    <published>2013-10-03T01:59:00Z</published>
    <updated>2013-10-03T01:59:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/10/single_point_logging.html"/>
    <content type="html">&lt;p&gt;I’ll continue to spam you with &lt;a href="http://golang.org/"&gt;go&lt;/a&gt; related posts. I am working on a rather small webapp built with go. Despite it being small we have still managed to code differently in different parts of the application. Logging is one such issue that we decided to do something about the other day. At the same time it was good to improve on the error handling which often goes hand in hand with logging. In the midst of this some external forces (operations….) tells us that we should use a &lt;strong&gt;logging server&lt;/strong&gt; for logging. Not right away mayhaps but eventually. This led us to go for our own logging functions so that we can change the implementation in one place. So we needed to get some common things into the log. User name (or some way to keep track of one call to the system), a timestamp, the code line where the logging occurred and the message itself. A normal application log file more or less. &lt;/p&gt;

&lt;p&gt;To call our own logger we thought something like &lt;code&gt;LogInfo(user User, message string, args... interface{})&lt;/code&gt; looked nice with corresponding functions for Error and Debug. The first implementation was easy enough:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func LogInfo(message string, args ...interface{}) {
  log.Printf("INFO | " + message, args...)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But wait? What happens with the code line number? It will point to our logger function and that is not what we intended. We would like the line nubmer to be where the call to LogInfo occurred. At this point in time it was very handy to have the source code available for the standard library. &lt;code&gt;Printf&lt;/code&gt; does not care about line numbers and such - it just prints whatever line it is invoked on. Underneath the &lt;code&gt;Printf&lt;/code&gt; function there are a &lt;code&gt;Logger&lt;/code&gt; type that defines an &lt;code&gt;Output&lt;/code&gt; function called by printf. So lets start with constructing a &lt;code&gt;Logger&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Logger() *log.Logger {
  return log.New( os.Stderr, "", log.Lshortfile | log.Ldate | log.Ltime )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument to &lt;code&gt;New is a writer. For now we are happy to write to Stderr. The second is a prefix to use when logging - we don't care about it now - probably useful when you log from several things to the same file. Lastly we tell the standard library what we want to log - a short file description with line number and a timestamp. Find the available options under the *const* part in the log package documentation. Now all we need to do is to call the &lt;/code&gt;Output` function on the logger.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func LogInfo(message string, args ...interface{}) {
  calldepth := 3 // the distance to the actual call for logging
  Logger().Output(calldepth, "INFO | " + fmt.Sprintf(message, args...))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and use it to log some stuff:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LogInfo("%s %s", "some", "stuff")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;calldepth&lt;/code&gt; here is basically what part of the stack that makes it as a code line into the block. The standard library uses 2 so it made sense to add one to get to the right position for us. The standard library uses &lt;code&gt;runtime.Caller&lt;/code&gt; to get to this information. There are other functions to get to the stack also in the &lt;code&gt;runtime&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;In the real world we passed in info about our user, extracted log message creation to its own function and added functions for error and debug. We also had one set of functions accepting a user and one set not accepting a user. We also did &lt;a href="http://stackoverflow.com/q/19115273/135673"&gt;some thinking&lt;/a&gt; about if it was possible to log something like a thread id and came to the conclusion that it isn’t possible in go. I got a &lt;a href="http://stackoverflow.com/a/19116962/135673"&gt;nice answer&lt;/a&gt; from &lt;a href="http://stackoverflow.com/users/41344/rog"&gt;rog&lt;/a&gt; and here is the first part:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Because of the high potential for abuse, there is no way to access an identifier for the current goroutine in Go. This may 
seem draconian, but this actually preserves an important property of the Go package ecosystem: &lt;em&gt;it does not matter if you 
start a new goroutine to do something&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A good explanation and in line with the go way of doing things. I can find it a bit limiting at times but it is almost always for a good reason which makes it easier to accept.&lt;/p&gt;

&lt;p&gt;As a side note - the go community is very helpful. Using the #golang tag on twitter for asking questions renders some nice answers and discussions. Very useful. And &lt;a href="http://stackoverflow.com"&gt;stackoverflow&lt;/a&gt; is a good resource as always.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-09-30:/2013/09/go_error_handling_thoughts.html</id>
    <title type="html">thoughts about error handling with go</title>
    <published>2013-09-30T21:02:00Z</published>
    <updated>2013-09-30T21:02:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/09/go_error_handling_thoughts.html"/>
    <content type="html">&lt;p&gt;I find myself with this code line lots of time:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if err != nil { return err }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sometimes with an extra return value - sometimes not. However - the go formatter likes it to be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if err != nil {
    return err
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is my preferred way to write it normally. Now I have started to use the one-liner approach to make my code more readable. In a simple database sequence you may need to check the error 3 or more times (getting the database, executing the query and scanning the response for data) so the error handling &lt;em&gt;noise&lt;/em&gt; will be 3 or 9 lines of such a function. In my mind there is a conflict between explicit code and readable code. Go seems to drive me towards explicit code forcing me to leave some of my coding practices behind.&lt;/p&gt;

&lt;p&gt;Please contribute your thoughts about this in the comments section below.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-09-28:/2013/09/golang_templating_engine.html</id>
    <title type="html">go templating - the basics</title>
    <published>2013-09-28T13:02:00Z</published>
    <updated>2013-09-28T13:02:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/09/golang_templating_engine.html"/>
    <content type="html">&lt;p&gt;&lt;a href="http://www.flickr.com/photos/29363671@N08/4264734398"&gt;&lt;img style="float:right" src="http://farm3.staticflickr.com/2723/4264734398_f89371801a.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am busy coding a web site with &lt;a href="http://golang.org/"&gt;go&lt;/a&gt;. I am still not convinced that go is the best choice for web development unless performance is in high demand. It is still great fun to learn a new language and a language that have different opinions on many things compared to other languages. This kind of experiences are very good to move forward as a developer. So kudos to &lt;a href="http://www.flatwallet.se/"&gt;flatwallet&lt;/a&gt; that lets me learn go while getting paid for it. &lt;/p&gt;

&lt;p&gt;We try to use as much as possible of the standard library but sometimes it is hard as I &lt;a href="http://highlevelbits.com/2013/09/pragmatic_unit_testing_with_go.html"&gt;described in my post about testing&lt;/a&gt;. When it comes to web development there is a good enough &lt;a href="http://golang.org/pkg/text/template/"&gt;template engine&lt;/a&gt; that provides with the simplest things to get stuff into your &lt;a href="http://highlevelbits.com/2012/04/control-your-markup.html"&gt;markup&lt;/a&gt;. In mainstream template engines the normal way to get behavior into your template is to use &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; for executing some code and &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; for getting some stuff inserted into the generated markup. In go you use double curly braces instead. So in order to insert a value you go &lt;code&gt;{{.Value}}&lt;/code&gt;. The single point is a reference to the data structure (remember - no objects in go) that was passed to the template from the back end code and value is a field in that structure. There is the basic control flow things like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if .IsActive }}
  Active
{{ else }}
  Inactive
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and loops:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Books }}
  &amp;lt;div&amp;gt;
    {{ .Title }} by {{ .Author }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using &lt;code&gt;range&lt;/code&gt; the &lt;code&gt;.&lt;/code&gt; context is set to the current item for each loop over the collection. As you see you just mix curly braces with HTML freely. (So that it looks really messy to the eye….) Since the templating doesn’t conflict with the markup you can also use them in attribute values. This may look nasty at times:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class="{{if .IsActive}}active{{else}}passive{{end}}"/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not to my liking. The alternative is to add another field to the page structure and calculate the value in the go code instead. It adds a bit of duplication and the number of line increases and I am not sure the overall readability goes up. So the above may actually be a good choice at times. In this particular case it has the benefit of keepin css classes in the markup. Indeed - you could do it like this just as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if .IsActive }}
  &amp;lt;div class="active"/&amp;gt;
{{ else }}
  &amp;lt;div class="passive"/&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Better or worse? This is a simple div with nothing else in it but consider a real world situation where there are some content inside etc. Then it may be better to go with the compact solution instead. Things like these may be good to put in the coding guidelines for a project. (You all do them - right?!?)&lt;/p&gt;

&lt;p&gt;You can define a template with &lt;code&gt;{{ define "my_template" }} &amp;lt;html&amp;gt;....&amp;lt;/html&amp;gt; {{ end }}&lt;/code&gt; for both whole pages and parts in a page. Say you define a header partial: &lt;code&gt;{{ define "header" }}&amp;lt;div&amp;gt;Menus and other header stuffs.&amp;lt;/div&amp;gt;{{ end }}&lt;/code&gt; then you can use it in another template with: &lt;code&gt;{{ template "header" }}&lt;/code&gt;. So that is kind of neat. There is no support for layouts so for solving that in the standard library way you’ll have to do it yourself with functions calling different templates in different contexts. &lt;/p&gt;

&lt;p&gt;One more thing. You can use &lt;code&gt;with&lt;/code&gt; to get deeper in the context of the page. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Books }}
  &amp;lt;div&amp;gt;
    {{ .Title }} by 
    {{ with .Author }}
      {{ .FirstName }}{{ .LastName }}
    {{ end }}
  &amp;lt;/div&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I haven’t used this much but it has the benefit of getting evaluated only if there is something in the referenced value. So it is a combined &lt;code&gt;if&lt;/code&gt; statement with a scope narrower.&lt;/p&gt;

&lt;p&gt;Then there is a bunch of built-in functions that makes life a bit easier. The one that has bothered me most is &lt;code&gt;call&lt;/code&gt; that lets you call a function from within the template. But not any function. It must either have been previously tied to the template with calls to &lt;code&gt;Funcs&lt;/code&gt; with a &lt;code&gt;FuncMap&lt;/code&gt; or be in the global namespace. So if you have a nice little function tied to the struct you are exposing to your template you can not use it right away. I find this limiting - the extra code to set it up can just as well be used to introduce another variable in the struct that holds the computed value. You end up with redundant data in your model where parts are ‘real’ data and parts are computed values. I don’t have a perfect &lt;em&gt;feel&lt;/em&gt; for this yet and will come back to review it later and maybe another post about advanced templating.&lt;/p&gt;

&lt;p&gt;The standard library documentation is really good. The templating basics is in the &lt;a href="http://golang.org/pkg/text/template/"&gt;text/template package&lt;/a&gt; while there are some added things for web pages in the &lt;a href="http://golang.org/pkg/text/template/"&gt;html/template package&lt;/a&gt;. This separation is obviously good so that you can do templating inside whatever format you work with.&lt;/p&gt;

&lt;p&gt;Engine photo by &lt;a href="http://www.flickr.com/photos/29363671@N08/"&gt;Jon Pekelnicky&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-09-15:/2013/09/baruco_day_2.html</id>
    <title type="html">baruco day two [conference report]</title>
    <published>2013-09-15T21:02:00Z</published>
    <updated>2013-09-15T21:02:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/09/baruco_day_2.html"/>
    <content type="html">&lt;p&gt;&lt;img style="float:right" src="http://assets2013.baruco.org/assets/logo-3ff2130df4d6cf11e8bd7f1e3d72bb6d.png" /&gt;&lt;/p&gt;

&lt;p&gt;The nice organisers thought it wise to start the second day an hour later. Surely a blessing for the first speaker. &lt;/p&gt;

&lt;p&gt;The keynote by Paolo Perrotta was entertaining and thought provoking. Spanning such wide topics as the discovery of how to calculate longitudes, distant forefathers crawling up from the sea and the horrors of SOAP, Paolo made a good shot at comparing progress in the software discipline with the evolution of mankind and maybe just maybe the future will be more functional than the present.&lt;/p&gt;

&lt;p&gt;Apart from the keynote the talks were more technical this day. The future of jruby, rubymotion for iOS coding, a bit of clojure, tender love shaving a yak. That sort of thing. &lt;/p&gt;

&lt;p&gt;Rather than listing all the talks I will focus on my takeaways from the conference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;functional programming is on the move. I heard a lot about that object orientation has become the way to code in the 21st century. But there are some issues that are not solved that well with object orientation. It doesn’t scale nicely and it seems that it is next to impossible to write larger systems with the technique. Functional has some characteristics that makes it attractive for the upcoming challenges. It is highly scalable (due to immutability) and it is really great for testing. THat functional sort of ‘appears’ at a Ruby conference is a good sign that it is up and coming.&lt;/li&gt;
  &lt;li&gt;a sense of fatigue and maturity. Look how far we have come in our field, that is great but many things still suck and we are bit tired. Hopefully a conference like this one can reeenergize and help us move on. The needs for decent software creation will not diminish in neither the close nor the distant future.&lt;/li&gt;
  &lt;li&gt;maybe use jruby in production?!?&lt;/li&gt;
  &lt;li&gt;there were several talks about the quality without a name. How do we go about producing software that can stay around for a while? Since I have been interested in these things since late 90s I didn’t learn much but it gives me hope that good practices are preached at a conference like this one. How to penetrate the breadth of developers out there is still largely an unknown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To sum up: a really nice conference moulded in the standard format. The communication flows mainly in one direction with breaks and parties making it possible to interact a bit further. This bothers me more and more with conferences - I would prefer a bit more interactivity. This time I sneaked away a bit prematurely feeling numb from all the listening. So sadly I missed the lightning talks - I am sure this was one of the best parts of the conference.&lt;/p&gt;

&lt;p&gt;Luckily I booked a further two days in Barcelona so now that the conference is over I will find out more about the city. It looks really nice so far! I had good food both nights at random restaurants and I stay at a really &lt;a href="https://sv.airbnb.com/rooms/1159801"&gt;nice airbnb&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2013-09-14:/2013/09/baruco_day_1.html</id>
    <title type="html">baruco day one [conference report]</title>
    <published>2013-09-14T21:02:00Z</published>
    <updated>2013-09-14T21:02:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2013/09/baruco_day_1.html"/>
    <content type="html">&lt;p&gt;&lt;img style="float:right" src="http://assets2013.baruco.org/assets/logo-3ff2130df4d6cf11e8bd7f1e3d72bb6d.png" /&gt;&lt;/p&gt;

&lt;p&gt;Last year I went to Ghent and &lt;a href="http://arrrrcamp.be/"&gt;arrrrcamp&lt;/a&gt; but failed to write a report. This year I am improving with reports from both days of &lt;a href="http://www.baruco.org"&gt;baruco&lt;/a&gt; - a bit larger a conference but similar in form to arrrrcamp. The timing could have been better though. I left a rails assignment two weeks ago and are now spending my days coding go. Exciting indeed but my ruby wanderings will be limited to side projects for a while now.&lt;/p&gt;

&lt;p&gt;The conference started with a keynote by the creator of &lt;a href="https://www.ruby-lang.org/en/"&gt;Ruby&lt;/a&gt;: &lt;a href="https://twitter.com/yukihiro_matz"&gt;Yukihiro Matzumoto&lt;/a&gt; (aka Matz). He started out with talking about himself. How he started coding basic on a very limited device some 30+ years from now and how he started designing Ruby 20 years ago. A very nice personal touch. The most thought provoking thing from the talk was how (computer) languages affect the way we think. Just like natural languages do. The way we have of communicating clearly influences how we organize our thoughts around a certain problem. Later on &lt;a href="http://blog.mattwynne.net/"&gt;Matt Wynne&lt;/a&gt; touched the same issue when giving a short overview over the history of object oriented programming. How it all started with Simula but then around 1980 branched of into Smalltalk and C++ where Smalltalk stands for less control, higher freedom and worse performance and C++ of the opposite. Matt pointed out that UML and the Rational Unified Process conglomerate came out of the C++ community whereas nice things like Domain Driven Design and eXtreme Programming came right out of the Smalltalk community. (No C++ programmers around to defend it.)&lt;/p&gt;

&lt;p&gt;Matz also told as a bit about future plans for Ruby core. Ruby 2.1 is due before christmas. Refinements will be a permanent feature of the language then. New releases will appear on an annual basis from now on. Ruby 3.0 in 2023 then?&lt;/p&gt;

&lt;p&gt;After Matz there were two talks about technical stuff relating to scaling Ruby. I haven’t had that kind of problems yet. If I am fortunate enough to build something that needs to scale massively I’ll have to deal with it then. Likely the performant parts will be rewritten in Go rather than trying to get Ruby to perform. Later on another talk on the technical side argued about obvious things like keepin secrets in env variables and trying to have dev and test environments as similar as production as possible. I suspect many needed to hear this so I was happy about it!&lt;/p&gt;

&lt;p&gt;Another trait of the first day was several ventures into object orientation. Matt Wynne described how a rewrite of cucumber made it into another kind of object oriented. It sounded very close to functional though so hard to tell the significance. &lt;a href="http://www.sandimetz.com/"&gt;Sandi Metz&lt;/a&gt; gave us a couple of rules for our object oriented life. Things like 100 lines to a class and 5 to a method. Sort of clean code baked down to a few rules. Interesting indeed. I have two rules: (1) write code that is easy to read (2) for the next person working on it. The result is pretty much the same. I don’t care much how these rules are formulated but I want them to exist (written or verbally) in any project I work on. &lt;a href="http://coreyhaines.com/"&gt;Corey Haines&lt;/a&gt; moved in the same hood with his entertaining talk &lt;em&gt;Design Patterns And The Proper Cultivation Thereof&lt;/em&gt; which in summary made the point that design patterns sure are useful if used as they were meant to be. He quoted &lt;a href="http://c2.com/cgi/wiki?ChristopherAlexander"&gt;Christoper Alexander&lt;/a&gt; (always nice!) saying that the application of design patterns can be done many times but will not produce the same result twice.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/iHiD"&gt;Jeremy Walker&lt;/a&gt; had a really nice talk about productivity. Most of the common sense things came though including work hard but not too hard and spiders on caffeine (which I have seen before - Linda Rising maybe?). The only thing I missed was pomodoro which would fit nicely into the focused work combined with the need for exercise now and then. People argue that you can’t use pomodoro if you want to reach and stay in flow. I don’t agree with that from my own personal experience. But it sure is different to us all and that was one of the important take aways from Jeremy’s talk. In the same spirit - &lt;a href="http://about.avdi.org/"&gt;Avdi Grimm&lt;/a&gt; neatly inter-vowed a bit of meta ruby code with a sincere message about finding the love of programming. A very important message to us all.&lt;/p&gt;

&lt;p&gt;The event is nicely organized with above standard foods both for breakfast and lunch. Way to go. Some optimism about the registration process caused a long queue in the morning so the whole day become half an hour late. But we are in Spain now so nemas problemas about that! &lt;/p&gt;

&lt;p&gt;I ended the day with a visit at Nou Camp and saw Barcelona beat Sevilla with 3-2. Lots of energy in that stadium!&lt;/p&gt;
</content>
  </entry>
</feed>
