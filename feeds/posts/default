
<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://www.highlevelbits.com/</id>
  <title>rss feed</title>
  <updated>2015-01-10T23:00:00Z</updated>
  <link rel="alternate" href="http://www.highlevelbits.com/"/>
  <link rel="self" href="http://www.highlevelbits.com/feeds/posts/default"/>
  <author>
    <name>Fredrik &amp; Hardy</name>
    <uri>http://www.highlevelbits.com</uri>
  </author>
  <entry>
    <id>tag:www.highlevelbits.com,2015-01-11:/2015/01/securing-arch-server.html</id>
    <title type="html">Securing an arch linux server</title>
    <published>2015-01-10T23:00:00Z</published>
    <updated>2015-01-10T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2015/01/securing-arch-server.html"/>
    <content type="html">
&lt;p&gt;I am setting up my own server for the second time. One year ago I got myself a virtual server at digital ocean running arch linux. Unfortunately they dropped support for arch early in 2014 so I needed to move elsewhere and I turned my eyes on linode. So in order to remember how this is done when I do it a third time I will write down some notes about it here. In this first post I will walk you through getting your server up to date and securing it on a shell level.&lt;/p&gt;

&lt;p&gt;This guide will set up the server &lt;code&gt;gibson&lt;/code&gt;  with a user called &lt;code&gt;william&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="getting-in-and-updating"&gt;Getting in and updating&lt;/h3&gt;

&lt;p&gt;From your provider you have gotten a root password. Log in with it.&lt;/p&gt;

&lt;p&gt;Set hostname:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hostnamectl set-hostname gibson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also add it to my local &lt;code&gt;/etc/hosts&lt;/code&gt; so I don’t have to remember the IP.&lt;/p&gt;

&lt;p&gt;I prefer running my server in the UTC time zone. If you want something else you can take care of it now. Use &lt;code&gt;timedatectl&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;Before you can update the system, you need to create entropy, initiate pacman-key and populate the keyring.&lt;/p&gt;

&lt;p&gt;To get arch package manager up and running you need to initiate it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;haveged -w 1024
pacman-key --init
pkill haveged
pacman-key --populate archlinux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then run the update:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -Syu
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also install some stuff I will need pretty soon:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pacman -S git zsh ufw
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="add-sudo-enable-user"&gt;Add sudo enable user&lt;/h3&gt;

&lt;p&gt;Then it is time to secure the login. It is considered harmful to have a password protected root login. Start with adding a normal user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;useradd -m william
passwd william
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Give the new user root access:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;visudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you have to know your way around &lt;code&gt;vi&lt;/code&gt;. I can barely manage &lt;code&gt;vim&lt;/code&gt; so….
Add this line somewhere in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruben ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now log out from your root login and try your new user. You should be able to login with password.&lt;/p&gt;

&lt;h3 id="secure-the-login"&gt;Secure the login&lt;/h3&gt;

&lt;p&gt;The next step is to use a public key for the ssh login instead of passwords. This will save you time when you need to get into your server and it is also more secure. &lt;/p&gt;

&lt;p&gt;If you don’t have a ssh key you have to generate it now. You can find out how with the help of google. Copy the public key file to the server:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp ~/.ssh/id_rsa.pub william@gibson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then login as &lt;code&gt;william&lt;/code&gt; to &lt;code&gt;gibson&lt;/code&gt;. The key file needs to be in &lt;code&gt;.ssh/authorized_keys&lt;/code&gt;. If you are the only user on the machine you can move it like below. Otherwise append it to the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir .ssh
mv id_rsa.pub .ssh/authorized_keys
chown -R .ssh
chmod 700 .ssh
chmod 600 .ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we need to make some changes to the ssd configuration file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this file the following lines needs to be uncommented and altered.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Port 66677
PasswordAuthentication no          
PermitRootLogin no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This changes the ssh port from the default 22 making it harder to start attacking the server. We also turn off password authentication and root login. Restart &lt;code&gt;sshd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl restart sshd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the only user that can login is &lt;code&gt;william&lt;/code&gt; with the ssh key that we entered and on the new port.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -p 66677 william@gibson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and you are fine to go.&lt;/p&gt;

&lt;p&gt;Now you likely want to use the server to run some software that needs to be available. In the next post I will show you how to set up &lt;code&gt;ufw&lt;/code&gt; - uncomplicated firewall.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-12-28:/2014/12/programming-languages-in-2015.html</id>
    <title type="html">Programming languages in 2015</title>
    <published>2014-12-27T23:00:00Z</published>
    <updated>2014-12-27T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/12/programming-languages-in-2015.html"/>
    <content type="html">
&lt;p&gt;3 years ago I scribbled down &lt;a href="http://highlevelbits.com/2011/12/programming-languages-in-2012.html"&gt;some predictions about programming languages trends in 2012&lt;/a&gt;. That was fun but a bit too boring to do every year…. so now is the time for a follow up.&lt;/p&gt;

&lt;h3 id="what-happened-with-my-predictions"&gt;What happened with my predictions?&lt;/h3&gt;

&lt;p&gt;It seems that I was mostly right with my predictions about the main contenders. Since then &lt;strong&gt;javascript&lt;/strong&gt; has moved forward and &lt;strong&gt;Java&lt;/strong&gt; is still rock solid. People are even moving back to Java from excursions to other languages. Scala hasn’t really taken off (thank god for that). A couple of new interesting languages has appeared that I didn’t anticipated. In the functional sphere we have &lt;strong&gt;elixir&lt;/strong&gt; that lures the ruby crowd onto the erlang platform and makes it more accessible. We also have &lt;strong&gt;go&lt;/strong&gt;, googles C replacement that looks really promising. I had the opportunity to try it out a bit a year ago and it was &lt;a href="http://highlevelbits.com/tags/golang.html"&gt;mostly good warm feelings&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="looking-into-the-next-couple-of-years"&gt;Looking into the next couple of years&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Java&lt;/strong&gt; will continue to be the main choice for enterprise software. This is a bit sad given all the nice alternatives out there nowadays but will probably make it easier to maintain large systems over time. Another trend is to combine enterprise Java on the backend with single page web apps with angular for the frontend. This brings me to javascript -&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt; will continue to increase in importance still being the only native language for web browsers. Neither &lt;strong&gt;dart&lt;/strong&gt; nor &lt;strong&gt;coffeescript&lt;/strong&gt; will make it into mainstream browsers in the upcoming years. It may be possible to run dart in chrome but not anywhere else. There will be a couple of new javascript web frameworks that will be used for a while. Angular may still be there three years from now but don’t count on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; and &lt;strong&gt;CSS&lt;/strong&gt; will continue to be crucial view technologies for the web. Combined with javascript they will form the mobile platform of tomorrow. Firefox OS is leading the way here and I expect to see more of this kind of consolidation. Nice things like &lt;strong&gt;haml&lt;/strong&gt; and &lt;strong&gt;slim&lt;/strong&gt; will continue to be marginal things.&lt;/p&gt;

&lt;p&gt;Functional languages and functional style in OO languages will continue to increase in popularity due to the heightened awareness of maintenance cost. Here I expect &lt;strong&gt;elixir&lt;/strong&gt; to continue going strong together with &lt;strong&gt;clojure&lt;/strong&gt; and &lt;strong&gt;erlang&lt;/strong&gt;. Scala will not make it - partly due to the &lt;em&gt;smorgåsbord&lt;/em&gt; character of the language and partly due to an elitist community. Also keep in mind that javascript is a capable functional language.&lt;/p&gt;

&lt;p&gt;You can also expect a move back to server side web frameworks. While it is fancy and performance friendly with single page web apps they are hard to maintain over several platforms and honestly - do users care about this &lt;strong&gt;at all&lt;/strong&gt;? I hope this move will be towards lightweight web frameworks like sinatra on ruby, flask on python or dropwizard on java rather than going back to rails and whatnot in the draconian framework genre.&lt;/p&gt;

&lt;p&gt;Also the move back to relational databases will continue and people will start using postgre as a document database.&lt;/p&gt;

&lt;h3 id="my-path-forward"&gt;My path forward&lt;/h3&gt;

&lt;p&gt;I am currently working with a client where the stack is a mixture of angular.js, camel, java, spring and some grails. This means I will improve my groovy and hopefully not turn worse with my javascript. I hope to continue doing some ruby on the side because I like the beauty of it. Strategically I will try to improve my go and my javascript and if I have any energy left after that I will dive into elixir.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://farm4.staticflickr.com/3270/3000553746_80acbb9c4e_o.jpg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;
&lt;a href="https://www.flickr.com/photos/nubui/3000553746"&gt;Photo&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/nubui/"&gt;nubui&lt;/a&gt;.
&lt;/small&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-11-20:/2014/11/markdown-readme-from-grails.html</id>
    <title type="html">Serving up that readme with grails</title>
    <published>2014-11-19T23:00:00Z</published>
    <updated>2014-11-19T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/11/markdown-readme-from-grails.html"/>
    <content type="html">
&lt;p&gt;So you wrote a nice readme for your grails project and realized that it would be nice to serve it at some or other URL on your site. Yeah - happened to me too. So here is what I did.&lt;/p&gt;

&lt;p&gt;First we need to add markdown capabilities to our grails project. For that we use the &lt;a href="https://grails.org/plugin/markdown"&gt;markdown plugin&lt;/a&gt;. Put the following line in your &lt;code&gt;BuildConfig.groovy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compile ":markdown:1.1.1"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next - &lt;a href="https://stackoverflow.com/questions/12835568/using-markdown-as-a-grails-view"&gt;which may be tricky&lt;/a&gt; - we need to have the markdown file in our &lt;code&gt;views&lt;/code&gt; directory for grails to find them. The file also need to end with &lt;code&gt;gsp&lt;/code&gt;. The easiest way to accomplish this is to make a soft link (yes - git preserves soft links….. given your coworkers also is on some kind of unix):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd grails-app/views/readme
ln -s ../../../readme.md readme.gsp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need some kind of route. I decide to go for a &lt;code&gt;readme&lt;/code&gt; path with its own controller but this can be done in several ways. Put this in your &lt;code&gt;UrlMappings.groovy&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;"/readme"(controller:"readme")
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and with that goes a &lt;code&gt;ReadmeController&lt;/code&gt;: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class ReadmeController {
  def readme() {
    render(layout: 'markdown', view: 'readme')
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass the view to &lt;code&gt;render&lt;/code&gt; and also a special layout needed to trigger markdown. Here is the essential part of the layout:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;markdown:renderHtml&amp;gt;
        &amp;lt;g:layoutBody/&amp;gt;
    &amp;lt;/markdown:renderHtml&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go with a nice path to your readme.&lt;/p&gt;

&lt;p&gt;This is admittedly a bit cumbersome but pretty straightforward. The other approach is to read the markdown programmatically and do the markup processing in a controller. Probably pros and cons with both approaches.&lt;/p&gt;

&lt;p&gt;(On a side note. At times like this I miss Ruby. I did &lt;a href="https://github.com/froderik/anyrest/blob/master/anyrest.rb"&gt;pretty much the same thing&lt;/a&gt; with &lt;a href="http://www.sinatrarb.com/"&gt;sinatra&lt;/a&gt; a while ago. Add a gem and &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get '/' do
    markdown :README
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the “controller”. Much easier.)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-11-11:/2014/11/100-continue.html</id>
    <title type="html">Posting large files over SSL</title>
    <published>2014-11-10T23:00:00Z</published>
    <updated>2014-11-10T23:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/11/100-continue.html"/>
    <content type="html">
&lt;p&gt;When posting a file in a complex setup with several layers I encountered a problem in a Java-&amp;gt;Apache interaction. I got this error message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Tue Nov 11 14:55:57 2014] [error] [client &amp;lt;ip&amp;gt;] request body exceeds maximum size (131072) for SSL buffer, referer: &amp;lt;referrer-url&amp;gt;
[Tue Nov 11 14:55:57 2014] [error] [client &amp;lt;ip&amp;gt;] could not buffer message body to allow SSL renegotiation to proceed, referer: &amp;lt;referrer-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After some googling where &lt;a href="https://stackoverflow.com/questions/14281628/ssl-renegotiation-with-client-certificate-causes-server-buffer-overflow"&gt;this stackoverflow post&lt;/a&gt; proved the most informative I learned that the upper limit for file size over SSL is rather low - just some 131702 bytes. The post lists several ways of solving the problem. I thought the header way was the neatest. I just added the header &lt;code&gt;Expect: 100-continue&lt;/code&gt; to the call and the problem disappeared. The value of the header is rather cryptic but well documented in &lt;a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.20"&gt;the specs&lt;/a&gt;. Basically it tells the server to finish SSL negotiations before downloading the full request body from the client.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <id>tag:www.highlevelbits.com,2014-10-23:/2014/10/smtp-mocking.html</id>
    <title type="html">Mocking SMTP when testing a black box of software</title>
    <published>2014-10-22T22:00:00Z</published>
    <updated>2014-10-22T22:00:00Z</updated>
    <link rel="alternate" href="http://www.highlevelbits.com/2014/10/smtp-mocking.html"/>
    <content type="html">
&lt;p&gt;So I wrote a micro service that gets a REST call and sends a mail or a SMS and I wanted to have some nice black box tests in place. &lt;/p&gt;

&lt;h3 id="the-test"&gt;The test&lt;/h3&gt;

&lt;p&gt;So my test would &lt;code&gt;POST&lt;/code&gt; to a web service, then wait for a little while and then check if a mail was sent. The test runs remotely from a build server so everything it needs needs to be accesible over HTTP. So I decided to have a &lt;em&gt;real&lt;/em&gt; SMTP server running on the server writing files to a directory that a web server can pick up and show to the test. And a static web server serving the mail files in that directory. Pseudo code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;random_id = UUID.generate()
message = subject: random_id, message: 'long rant'
server.post message
wait 1000
list_of_mails = staticServer.get
assert list_of_mails =~ random_ud
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dummy-smtp-server"&gt;Dummy SMTP server&lt;/h3&gt;

&lt;p&gt;I looked around on the Internet for a while. I used a Java based graphical dummy server locally called &lt;a href="https://nilhcem.github.io/FakeSMTP/"&gt;FakeSMTP&lt;/a&gt;. It is really useful when doing stuff in a graphical environment. Now I needed something headless instead. My eyes fell on a &lt;a href="https://github.com/maestrofjp/Dummy-SMTP"&gt;small Python script&lt;/a&gt; that did almost exactly what I wanted. The only thing missing was the naming of the files. In order to trace a mail through the server onto the SMTP server I needed something unique. I decided to put a UUID as the subject. The Python script needed &lt;a href="https://github.com/froderik/Dummy-SMTP"&gt;a little tweak&lt;/a&gt; to get the subject (as well as the timestamp) onto the filename.&lt;/p&gt;

&lt;p&gt;The script only works with Python 2 so make sure you have it….. I am sure it is easy to change for Python 3 for a pythonista.&lt;/p&gt;

&lt;h3 id="simple-file-serving-web-server"&gt;Simple file serving web server&lt;/h3&gt;

&lt;p&gt;Since the system &lt;strong&gt;under test&lt;/strong&gt; lives in a tomcat I started out trying to make tomcat serve static files from the folder where the SMTP server stuffs mail files. It is supposed to work but I had some problems and gave up deciding to search for a simpler solution. And suddenly there it was. Look at &lt;a href="https://docs.python.org/2/library/simplehttpserver.html"&gt;this&lt;/a&gt; beauty:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get yourself into a directory from where you want to serve static files - type the above into the terminal and you are up and running on port &lt;code&gt;8000&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id="closing-rant-about-naming"&gt;Closing rant about naming&lt;/h3&gt;

&lt;p&gt;Integration tests can mean many things. There seem to be no common vocabulary within the testing discipline. In Grails - the framework used in the micro service here - integration testing means talking directly to a controller and stubbing away third party dependencies. So the meaning here is to test the different parts and of a system together. (As opposite to unit testing.) For me integration testing normally means testing a couple of systems together and accessing it from the outside (normally with HTTP in some form). This confusion about names led me to use &lt;em&gt;black box testing&lt;/em&gt; in this article. Using another name for this does not really help but when talking about black boxes it is obvious that we are not testing or knows about any internals - a good thing.&lt;/p&gt;
</content>
  </entry>
</feed>

